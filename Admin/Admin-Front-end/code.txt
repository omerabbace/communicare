// File: App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Global Styling */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: white;
}

h1, h2 {
  color: #333;
}

button {
  padding: 10px 15px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}

input {
  padding: 10px;
  margin: 10px 0;
  width: 100%;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.error {
  color: red;
  margin-top: 10px;
}

/* Default Page Styling */
.default-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: white;
}

.default-page button {
  margin-top: 20px;
}

/* Login and Issue Page Styling */
.login-container, .issue-container {
  max-width: 500px;
  margin: 0 auto;
  padding: 40px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  margin-top: 50px;
}

.issue-container ul {
  list-style-type: none;
  padding: 0;
}

.issue-container li {
  padding: 10px;
  background-color: #007bff;
  color: white;
  margin-bottom: 5px;
  border-radius: 5px;
}


// File: App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import DefaultPage from './components/DefaultPage';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import ProfileManage from './components/PorfileManage';
import Logout from './components/Logout';
import ProtectedRoute from './ProtectedRoute'; 
import ChangePassword from './components/ChangePassword';
import CreatePoll from './components/Poll';
import PollManagement from './components/PollManagement';
import CreateCharityProject from './components/CharityProject';
import IssuePage from './components/IssuePage';
import CharityProjects from './components/ManageCharity';
import NormalUsers from './screens/NormalUsers';
import ServiceProviders from './screens/ServiceProviders';
import Volunteers from './screens/Volunteers';
import UserForm from './components/userForm';
import VolunteerForm from './components/VolunteerForm';
import ServiceProviderForm from './components/ServiceProviderForm';
import EditUserForm from './components/EditUserForm';
import VolunteerApprovalScreen from './screens/VolunteerApprovalScreen';
import ServiceProviderApprovalScreen from './screens/ServiceProviderApprovalScreen';
import IssuesScreen from './screens/IssuesScreen';
import RejectedIssuesScreen from './screens/RejectedIssuesScreen';
import AssignedTasksScreen from './screens/AssignedTasksScreen';
import CompletedIssuesScreen from './screens/CompletedIssuesScreen';
import InProgressIssuesScreen from './screens/InProgressIssuesScreen';
function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<DefaultPage />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />     
        {/* Protected */}
        <Route path="/dashboard" element={<ProtectedRoute element={Dashboard} />} />
        <Route path="/profileManage" element={<ProtectedRoute element={ProfileManage} />} />
        <Route path="/logout" element={<ProtectedRoute element={Logout} />} />
        <Route path="/ChangePassword" element={<ProtectedRoute element={ChangePassword} />} />
        <Route path="/poll" element={<ProtectedRoute element={CreatePoll} />} />
        <Route path="/pollManagement" element={<ProtectedRoute element={PollManagement} />} />
        <Route path="/charityProject" element={<ProtectedRoute element={CreateCharityProject} />} />
        <Route path="/charityProject" element={<ProtectedRoute element={CreateCharityProject} />} />
        <Route path="/issues" element={<ProtectedRoute element={IssuePage} />} />
        <Route path="/manageCharity" element={<ProtectedRoute element={CharityProjects} />} />
        <Route path="/normaluser" element={<ProtectedRoute element={NormalUsers} />} />
        <Route path="/serviceProviders" element={<ProtectedRoute element={ServiceProviders} />} />
        <Route path="/volunteers" element={<ProtectedRoute element={Volunteers} />} />
        <Route path="/UserForm" element={<ProtectedRoute element={UserForm} />} />
        <Route path="/volunteerForm" element={<ProtectedRoute element={VolunteerForm} />} />
        <Route path="/serviceproviderForm" element={<ProtectedRoute element={ServiceProviderForm} />} />
        <Route path="/edituserform" element={<ProtectedRoute element={EditUserForm} />} />
        <Route path="/serviceApprovals" element={<ProtectedRoute element={ServiceProviderApprovalScreen} />} />
        <Route path="/volunteerApprovals" element={<ProtectedRoute element={VolunteerApprovalScreen} />} />
        <Route path="/reportedissues" element={<ProtectedRoute element={IssuesScreen} />} />
        <Route path="/rejectedissues" element={<ProtectedRoute element={RejectedIssuesScreen} />} />
        <Route path="/assignedtasks" element={<ProtectedRoute element={AssignedTasksScreen} />} />
        <Route path="/completedIssues" element={<ProtectedRoute element={CompletedIssuesScreen} />} />
        <Route path="/inprogressIssues" element={<ProtectedRoute element={InProgressIssuesScreen} />} />
        
      </Routes>
    </Router>
  );
}

export default App;


// File: components\AdminReportModal.jsx
import React, { useState } from 'react';
import '../styles/b.css';
import { BASE_URL } from '../config';

const AdminReportModal = ({ open, onClose, issue, onSubmit }) => {
  const [reportDescription, setReportDescription] = useState('');
  console.log(issue.media);
  if (!issue) return null;

  const handleReportSubmit = async (e) => {
    e.preventDefault();
    try {
      await onSubmit(reportDescription);
      onClose();
    } catch (error) {
      console.error('Error submitting report:', error);
    }
  };

  return (
    <div className={`modal-container ${open ? 'open' : ''}`}>
      <div className="issue-details-modal">
        <div className="modal-header">
          <h2>Send Report to User</h2>
          <button className="close-button" onClick={onClose}>X</button>
        </div>
        <div className="modal-content scrollable">
          <form onSubmit={handleReportSubmit}>
            <div className="form-group">
              <label>Issue Description:</label>
              <textarea value={issue.description || 'N/A'} readOnly></textarea>
            </div>

            {issue.media?.length > 0 && (
              <div className="form-group">
                <label>Completion Report Media Files:</label>
                {issue.media.map((mediaItem, index) => (
                  <div key={index} className="media-item">
                    {mediaItem.type === 'image' ? (
                      <img
                        src={`${BASE_URL}/${mediaItem.uri}`}
                        alt={`Media ${index + 1}`}
                        style={{ width: '50%', height: 'auto' }}
                        onError={(e) => (e.target.src = 'https://via.placeholder.com/500?text=Image+not+available')}
                      />
                    ) : mediaItem.type === 'video' ? (
                      <video controls style={{ width: '50%', height: 'auto' }}>
                        <source src={`${BASE_URL}/${mediaItem.uri}`} type="video/mp4" />
                        <p>Your browser does not support this video format.</p>
                      </video>
                    ) : (
                      <p>Unsupported media type</p>
                    )}
                  </div>
                ))}
              </div>
            )}

            <div className="form-group">
              <label>Admin Report Description:</label>
              <textarea
                value={reportDescription}
                onChange={(e) => setReportDescription(e.target.value)}
                placeholder="Enter your report here"
                required
              ></textarea>
            </div>

            <div className="form-actions">
              <button id='assignTask' type="submit">Submit </button>
              <button id='cancel' type="button" onClick={onClose}>Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AdminReportModal;


// File: components\AssignedTaskTable.jsx
import React from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { IconButton, Menu, MenuItem, Box } from '@mui/material';
import MoreVertIcon from '@mui/icons-material/MoreVert';

// AssignedTaskTable Component to display the list of assigned tasks
const AssignedTaskTable = ({ rows, onView }) => {
  const columns = [
    { field: 'issueType', headerName: 'Issue Type', headerAlign: 'center', align: 'center', width: 200 },
    { field: 'description', headerName: 'Description', width: 300 },
    { field: 'requiredVolunteers', headerName: 'Required Volunteers', headerAlign: 'center', align: 'center', width: 200 },
    { field: 'assignedVolunteers', headerName: 'Accepted Volunteers', headerAlign: 'center', align: 'center', width: 200,  },
    { field: 'status', headerName: 'Status', headerAlign: 'center', align: 'center', width: 150 },
    { field: 'actions', headerName: 'Actions', headerAlign: 'center', align: 'center', width: 150, renderCell: (params) => (
      <ActionMenu id={params.row._id} onView={onView} />
    ) },
  ];

  return (
    <Box
      sx={{
        height: 500,
        width: '100%',
        '& .MuiDataGrid-root': {
          backgroundColor: '#ffffff',
        },
        '& .MuiDataGrid-columnHeaders': {
          backgroundColor: '#f5f5f5',
        },
        '& .MuiDataGrid-cell': {
          backgroundColor: '#ffffff',
        },
        '& .MuiDataGrid-footerContainer': {
          borderTop: '1px solid #e0e0e0',
          paddingRight: '16px',
        },
      }}
    >
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        getRowId={(row) => row._id}
        disableSelectionOnClick
        disableColumnResize
      />
    </Box>
  );
};

// ActionMenu Component for "See Full Details"
const ActionMenu = ({ id, onView }) => {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <>
      <IconButton onClick={handleClick}>
        <MoreVertIcon />
      </IconButton>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        <MenuItem onClick={() => { onView(id); handleClose(); }}>See Full Details</MenuItem>
      </Menu>
    </>
  );
};

export default AssignedTaskTable;


// File: components\ChangePassword.jsx
import React, { useState } from 'react';
import Sidebar from './Sidebar';
import '../styles/ManageProfile.css';
import axios from 'axios';
import { BASE_URL } from '../config';
import { FaEye, FaEyeSlash } from 'react-icons/fa'; // For eye icon

const ChangePassword = () => {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Toggle password visibility
  const toggleCurrentPasswordVisibility = () => {
    setShowCurrentPassword((prevState) => !prevState);
  };

  const toggleNewPasswordVisibility = () => {
    setShowNewPassword((prevState) => !prevState);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword((prevState) => !prevState);
  };

  // Handle form submission for password change
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');

    // Password length validation
    if (newPassword.length < 6) {
      setError('New password should be at least 6 characters long.');
      return;
    }

    // Password match validation
    if (newPassword !== confirmPassword) {
      setError('New password and confirm password do not match.');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      console.log("tokenn ",token);
      const response = await axios.put(
        `${BASE_URL}/api/user/profile/changePassword`,
        { currentPassword, newPassword },
        {
          headers: { Authorization: `Bearer ${token}` },
        
        }
      );
      
      setMessage('Password changed successfully!');
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
    } catch (err) {
      if (err.response && err.response.status === 400) {
        setError('Current password is incorrect.');
      } else {
        setError('Failed to change password. Please try again.');
      }
    }
  };

  return (
    <div className="manage-profile-container">
      <Sidebar />
      <div className="main-content">
        <header className="header">
          <h1>Change Password</h1>
        </header>
        <div className="profile-form-container">
          <form onSubmit={handleSubmit} className="profile-form">
            {/* Current Password */}
            <div className="form-group">
              <label htmlFor="currentPassword">Current Password</label>
              <div className="password-container">
                <input
                  type={showCurrentPassword ? 'text' : 'password'}
                  id="currentPassword"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                  required
                  autoComplete="off" // Prevent auto-fill
                />
                <span className="password-toggle-icon" onClick={toggleCurrentPasswordVisibility}>
                  {showCurrentPassword ? <FaEyeSlash /> : <FaEye />}
                </span>
              </div>
            </div>

            {/* New Password */}
            <div className="form-group">
              <label htmlFor="newPassword">New Password</label>
              <div className="password-container">
                <input
                  type={showNewPassword ? 'text' : 'password'}
                  id="newPassword"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  required
                />
                <span className="password-toggle-icon" onClick={toggleNewPasswordVisibility}>
                  {showNewPassword ? <FaEyeSlash /> : <FaEye />}
                </span>
              </div>
            </div>

            {/* Confirm Password */}
            <div className="form-group">
              <label htmlFor="confirmPassword">Confirm New Password</label>
              <div className="password-container">
                <input
                  type={showConfirmPassword ? 'text' : 'password'}
                  id="confirmPassword"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                />
                <span className="password-toggle-icon" onClick={toggleConfirmPasswordVisibility}>
                  {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                </span>
              </div>
            </div>

            <button type="submit" className="custom-button">Change Password</button>

            {message && <p className="success-message">{message}</p>}
            {error && <p className="error-message">{error}</p>}
          </form>
        </div>
      </div>
    </div>
  );
};

export default ChangePassword;


// File: components\CharityProject.jsx
import React, { useState } from 'react';
import axios from 'axios';
import Sidebar from './Sidebar';
import '../styles/ManageProfile.css';
import { BASE_URL } from '../config';

const CreateCharityProject = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [progress, setProgress] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setMessage('');
    
    try {
      const token = localStorage.getItem('token');
    //   console.log(token);
    //   console.log('title', title);
    //   console.log('desc', description);
    //   console.log('progress', progress);

      // Make API request to create charity project
      const response = await axios.post(
        `${BASE_URL}/api/charityProjects/create`,
        { title, description, progress },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      setMessage('Charity project created successfully!');
      setTitle('');
      setDescription('');
      setProgress('');
    } catch (err) {
      setError('Failed to create charity project. Please try again.');
    }
  };

  return (
    <div className="manage-profile-container">
      <Sidebar />
      <div className="main-content">
        <header className="header">
          <h1>Create Charity Project</h1>
        </header>
        <div className="profile-form-container">
          <form onSubmit={handleSubmit} className="profile-form">
            <div className="form-group">
              <label>Project Title</label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label>Description</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows="5"
                required
              ></textarea>
            </div>

            <div className="form-group">
              <label>Progress (0-100%)</label>
              <input
                type="number"
                min="0"
                max="100"
                value={progress}
                onChange={(e) => setProgress(e.target.value)}
                required
              />
            </div>

            <button type="submit" className="custom-button">Create Project</button>

            {message && <p className="success-message">{message}</p>}
            {error && <p className="error-message">{error}</p>}
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreateCharityProject;


// File: components\CompletedIssueTable.jsx
import React, { useState } from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { IconButton, Menu, MenuItem, Box } from '@mui/material';
import MoreVertIcon from '@mui/icons-material/MoreVert';

const CompletedIssueTable = ({ rows, onViewDetails, onReport, isCompletedScreen }) => {
  // Define columns conditionally based on the issue status
  const columns = [
    { field: 'description', headerName: 'Issue', width: 220, headerAlign: 'center' , align: 'center' },
    { field: 'leader', headerName: 'Team Lead', width: 200, headerAlign: 'center', align: 'center' },
    isCompletedScreen
      ? { field: 'completionReport', headerName: 'Completion Description', width: 200, align: 'center', headerAlign: 'center' }
      : { field: 'updatedBy', headerName: 'Updated By', width: 200, align: 'center', headerAlign: 'center' },
    { field: 'status', headerName: 'Status', width: 150, align: 'center', headerAlign: 'center' },
    {
      field: 'actions',
      headerName: 'Actions',
      width: 150,
      align: 'center',
      headerAlign: 'center',
      renderCell: (params) => (
        <ActionMenu
          onViewDetails={() => onViewDetails(params.row)}
          onReport={isCompletedScreen ? () => onReport(params.row) : null} // Report action only if it's the completed screen
        />
      ),
    },
  ];

  return (
    <Box sx={{ height: 500, width: '100%', backgroundColor: '#ffffff' }}>
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        disableSelectionOnClick
      />
    </Box>
  );
};

const ActionMenu = ({ onViewDetails, onReport }) => {
  const [anchorEl, setAnchorEl] = useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <>
      <IconButton onClick={handleClick}>
        <MoreVertIcon />
      </IconButton>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        <MenuItem onClick={() => { onViewDetails(); handleClose(); }}>View Details</MenuItem>
        {onReport && (
          <MenuItem onClick={() => { onReport(); handleClose(); }}>Report to Normal User</MenuItem>
        )}
      </Menu>
    </>
  );
};

export default CompletedIssueTable;


// File: components\CompletedModal.jsx
import React from 'react';
import '../styles/b.css';
import { BASE_URL } from '../config';

const CompletedModal = ({ issue, onClose }) => {
  if (!issue) return null;

  return (
    <div className="issue-details-modal">
      <div className="modal-header">
        <h2>Issue Details</h2>
        <button className="close-button" onClick={onClose}>X</button>
      </div>
      <div className="modal-content scrollable">
        <form>
          <div className="form-group">
            <label>Issue Type:</label>
            <input type="text" value={issue.issueType || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Reported By:</label>
            <input type="text" value={issue.reportedBy || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Email:</label>
            <input type="email" value={issue.reportedByEmail || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Reported Date:</label>
            <input type="text" value={issue.createdAt ? new Date(issue.createdAt).toLocaleString('en-GB') : 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Description:</label>
            <textarea value={issue.description || 'N/A'} readOnly></textarea>
          </div>

          <div className="form-group">
            <label>Team Leader:</label>
            <input type="text" value={issue.leader || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Completion Report:</label>
            <textarea value={issue.completionReport || 'No Report'} readOnly></textarea>
          </div>

          <div className="form-group">
            <label>Location:</label>
            <input type="text" value={`${issue.location?.latitude || 'N/A'}, ${issue.location?.longitude || 'N/A'}`} readOnly />
          </div>

          {issue.media?.length > 0 && (
            <div className="form-group">
              <label>Media Files:</label>
              {issue.media.map((mediaItem, index) => (
                <div key={index} className="media-item">
                  {mediaItem.type === 'image' ? (
                    <img
                      src={`${BASE_URL}/${mediaItem.uri}`}
                      alt={`Media ${index + 1}`}
                      style={{ width: '50%', height: 'auto' }}
                      onError={(e) => (e.target.src = 'https://via.placeholder.com/500?text=Image+not+available')}
                    />
                  ) : mediaItem.type === 'video' ? (
                    <video controls style={{ width: '50%', height: 'auto' }}>
                      <source src={`${BASE_URL}/${mediaItem.uri}`} type="video/mp4" />
                      <p>Your browser does not support this video format.</p>
                    </video>
                  ) : (
                    <p>Unsupported media type</p>
                  )}
                </div>
              ))}
            </div>
          )}

          <div className="form-actions">
            <button type="button" onClick={onClose}>Close</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CompletedModal;


// File: components\Dashboard.jsx
// Dashboard.js
import React from 'react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import Sidebar from './Sidebar';
import '../styles/Dashboard.css'; // Separate CSS file for dashboard styles

// Register components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  // Data for the static bar chart
  const data = {
    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    datasets: [
      {
        label: 'Reported Accidents',
        backgroundColor: '#ef5350', // Red color for reported accidents
        borderColor: '#c62828',
        borderWidth: 1,
        hoverBackgroundColor: '#e57373',
        hoverBorderColor: '#b71c1c',
        data: [150, 200, 170, 250, 220, 180, 300], // Example data
      },
      {
        label: 'Issue Reporting',
        backgroundColor: '#42a5f5', // Blue color for issue reporting
        borderColor: '#1976d2',
        borderWidth: 1,
        hoverBackgroundColor: '#64b5f6',
        hoverBorderColor: '#1565c0',
        data: [100, 120, 150, 170, 160, 180, 200], // Example data
      },
      {
        label: 'Solved Issues',
        backgroundColor: '#66bb6a', // Green color for solved issues
        borderColor: '#2e7d32',
        borderWidth: 1,
        hoverBackgroundColor: '#81c784',
        hoverBorderColor: '#1b5e20',
        data: [80, 100, 120, 150, 130, 160, 190], // Example data
      },
      {
        label: 'Pending Issues',
        backgroundColor: '#ffb74d', // Orange color for pending issues
        borderColor: '#ef6c00',
        borderWidth: 1,
        hoverBackgroundColor: '#ffcc80',
        hoverBorderColor: '#e65100',
        data: [70, 80, 60, 90, 100, 110, 130], // Example data
      }
    ]
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          stepSize: 50,
          font: {
            size: 12,
          },
          color: '#6b7280',
        },
        grid: {
          display: true,
          drawBorder: false,
          color: '#e5e7eb',
        },
      },
      x: {
        type: 'category',
        ticks: {
          font: {
            size: 12,
          },
          color: '#6b7280',
        },
        grid: {
          display: false,
        },
      },
    },
    plugins: {
      legend: {
        display: true,
        position: 'top',
        align: 'end',
        labels: {
          boxWidth: 12,
          boxHeight: 12,
          font: {
            size: 14,
          },
          color: '#6b7280',
        },
      },
    },
  };
  
  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <header className="dashboard-header">
          <h1>Welcome back, Admin 👋</h1>
          <p>Overview of accident reports, issues, and donations over the last 7 days.</p>
        </header>

        {/* Dashboard Stats */}
        <div className="dashboard-stats">
          <div className="stat-card">
            <h3>Total Reported Accidents</h3>
            <h2>1,520 <span>+20.5%</span></h2>
            <p>Number of accidents reported in the last 7 days.</p>
          </div>
          <div className="stat-card">
            <h3>Issue Reporting</h3>
            <h2>980 <span>+15.7%</span></h2>
            <p>Issues reported by users over the last 7 days.</p>
          </div>
          <div className="stat-card">
            <h3>Solved Issues</h3>
            <h2>780 <span>+10.4%</span></h2>
            <p>Total number of issues resolved in the past week.</p>
          </div>
          <div className="stat-card">
            <h3>Total Donations</h3>
            <h2>12,3453 <span>+25.8%</span></h2>
            <p>Donations collected for all charity projects this week.</p>
          </div>
        </div>

        {/* Bar chart */}
        <div className="dashboard-charts">
          <div className="chart-container">
            <h3>Weekly Issue and Accident Statistics</h3>
            <Bar data={data} options={options} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


// File: components\DefaultPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import '../styles/DefaultPage.css';

const DefaultPage = () => {
  return (
    <div className="default-page">
      <div className="content-wrapper"> {/* Wraps content for vertical centering */}
        {/* Top Image */}
        <div className="image-container">
          <img src="/img/home.jpg" alt="Communi Care" className="center-image" />
        </div>

        {/* Content Section */}
        <div className="welcome-box">
          <h1>Welcome to Communi Care</h1>
        </div>

        {/* Bottom Buttons */}
        <div className="button-container">
          <Link to="/login">
            <button className="custom-button">Login</button>
          </Link>
          <Link to="/register">
            <button className="custom-button">Register</button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default DefaultPage;

// File: components\EditServiceProvider.jsx
import React, { useState, useEffect } from 'react';
import '../styles/userForm.css';

const EditServiceProviderForm = ({ user, onClose }) => {
    const [formData, setFormData] = useState({
        fullName: '',
        email: '',
        phoneNumber: '',
        password: '',
        confirmPassword: '',
        cnic: '',
        serviceType: '',
    });
    const [errors, setErrors] = useState({});

    // Initialize form data with user prop on mount or when user changes
    useEffect(() => {
        if (user) {
            setFormData({
                fullName: user.name || '',
                email: user.email || '',
                phoneNumber: user.phone || '',
                cnic: user.cnic || '',
                serviceType: user.serviceType || '',
                password: '', // Leave password empty for security reasons
                confirmPassword: ''
            });
        }
    }, [user]);

    // Function to handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;

        // Format CNIC field to XXXXX-XXXXXX-X format
        if (name === 'cnic') {
            let formattedValue = value.replace(/\D/g, ''); // Remove non-digit characters
            if (formattedValue.length > 5) {
                formattedValue = formattedValue.slice(0, 5) + '-' + formattedValue.slice(5);
            }
            if (formattedValue.length > 12) {
                formattedValue = formattedValue.slice(0, 12) + '-' + formattedValue.slice(12, 13);
            }
            setFormData({
                ...formData,
                [name]: formattedValue
            });
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };

    // Function to validate the form
    const validate = () => {
        const newErrors = {};

        // Validate full name (only letters and max length 50)
        if (!/^[A-Za-z\s]{1,50}$/.test(formData.fullName)) {
            newErrors.fullName = 'Full Name should contain only letters.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address.';
        }

        // Validate phone number (11 digits)
        if (!/^\d{11}$/.test(formData.phoneNumber)) {
            newErrors.phoneNumber = 'Phone Number should contain 11 digits.';
        }

        // Validate password (minimum 6 characters)
        if (formData.password && formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters long.';
        }

        // Validate confirm password (must match password)
        if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match.';
        }

        // Validate CNIC (XXXXX-XXXXXX-X format)
        if (!/^\d{5}-\d{7}-\d{1}$/.test(formData.cnic)) {
            newErrors.cnic = 'CNIC should be in the format XXXXX-XXXXXXX-X.';
        }

        // Validate service type selection
        if (!formData.serviceType) {
            newErrors.serviceType = 'Please select a service type.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Function to handle form submission
    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) {
            console.log('Form submitted:', formData);
            // Submit form or perform desired action
        }
    };

    return (
        <div className='userForm-container'>
            <div className="main-content">
                <h2>Edit Service Provider</h2>
                <form className="user-form" onSubmit={handleSubmit}>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="fullName">Full Name <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="fullName"
                                    id="fullName"
                                    placeholder="Full Name"
                                    value={formData.fullName}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.fullName && <span className="error-text">{errors.fullName}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="email">Email Address <span className="required">*</span></label>
                                <input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email Address"
                                    value={formData.email}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.email && <span className="error-text">{errors.email}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="phoneNumber">Phone Number <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="phoneNumber"
                                    id="phoneNumber"
                                    placeholder="Phone Number"
                                    value={formData.phoneNumber}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.phoneNumber && <span className="error-text">{errors.phoneNumber}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="password">Password</label>
                                <input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.password && <span className="error-text">{errors.password}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="confirmPassword">Confirm Password</label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    id="confirmPassword"
                                    placeholder="Confirm Password"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="cnic">CNIC <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="cnic"
                                    id="cnic"
                                    placeholder="CNIC (XXXXX-XXXXXX-X)"
                                    value={formData.cnic}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength="15" // Max length for CNIC format
                                />
                            </div>
                            {errors.cnic && <span className="error-text">{errors.cnic}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="serviceType">Service Type <span className="required">*</span></label>
                                <select
                                    name="serviceType"
                                    id="serviceType"
                                    value={formData.serviceType}
                                    onChange={handleChange}
                                    className="form-input"
                                >
                                    <option value="">Select Service Type</option>
                                    <option value="Accident Management">Accident Management</option>
                                    <option value="Vehicle Assistance">Vehicle Assistance</option>
                                </select>
                            </div>
                            {errors.serviceType && <span className="error-text">{errors.serviceType}</span>}
                        </div>
                    </div>
                    <div className="form-row button-container-edit">
                        <button type="submit" className="save-button">
                            Save
                        </button>
                        <button type="button" className="cancel-button" onClick={onClose}>
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditServiceProviderForm;


// File: components\EditUserForm.jsx
    import React, { useState, useEffect } from 'react';
    import '../styles/userForm.css';

    const EditUserForm = ({ user, onClose }) => {
        const [formData, setFormData] = useState({
            name: '',
            email: '',
            phoneNumber: '',
            password: '',
            confirmPassword: '',
            role : 'normal'
        });
        const [errors, setErrors] = useState({});

        // Initialize form data with user prop on mount or when user changes
        useEffect(() => {
            if (user) {
                setFormData({
                    name: user.name || '',
                    email: user.email || '',
                    phone: user.phone || '',
                    password: '', 
                    confirmPassword: '' ,
                    role : 'normal',
                });
            }
        }, [user]);

        // Function to handle input changes
        const handleChange = (e) => {
            setFormData({
                ...formData,
                [e.target.name]: e.target.value
            });
        };

        // Function to validate the form
        const validate = () => {
            const newErrors = {};

            // Validate full name (only letters and max length 50)
            if (!/^[A-Za-z\s]{1,50}$/.test(formData.name)) {
                newErrors.name = 'Full Name should contain only letters.';
            }

            // Validate email
            if (!/\S+@\S+\.\S+/.test(formData.email)) {
                newErrors.email = 'Please enter a valid email address.';
            }

            // Validate phone number (11 digits)
            if (!/^\d{11}$/.test(formData.phone)) {
                newErrors.phone = 'Phone Number should contain 11 digits.';
            }

            // Validate password (minimum 6 characters)
            if (formData.password.length > 0 && formData.password.length < 6) {
                newErrors.password = 'Password must be at least 6 characters long.';
            }

            // Validate confirm password (must match password)
            if (formData.password !== formData.confirmPassword) {
                newErrors.confirmPassword = 'Passwords do not match.';
            }

            setErrors(newErrors);
            return Object.keys(newErrors).length === 0;
        };

        // Function to handle form submission
        const handleSubmit = (e) => {
            e.preventDefault();
            if (validate()) {
                console.log('Form submitted:', formData);
                // Submit form or perform desired action
            }
        };

        return (
            <div className='userForm-container'>
                <div className="main-content">
                    <h2>Edit User</h2>
                    <form className="user-form" onSubmit={handleSubmit}>
                        <div className="form-row">
                            <div className="form-group">
                                <div className="form-label-input">
                                    <label htmlFor="name">Full Name <span className="required">*</span></label>
                                    <input
                                        type="text"
                                        name="name"
                                        id="name"
                                        placeholder="Full Name"
                                        value={formData.name}
                                        onChange={handleChange}
                                        className="form-input"
                                    />
                                </div>
                                {errors.fullName && <span className="error-text">{errors.fullName}</span>}
                            </div>
                            <div className="form-group">
                                <div className="form-label-input">
                                    <label htmlFor="email">Email Address <span className="required">*</span></label>
                                    <input
                                        type="email"
                                        name="email"
                                        id="email"
                                        placeholder="Email Address"
                                        value={formData.email}
                                        onChange={handleChange}
                                        className="form-input"
                                    />
                                </div>
                                {errors.email && <span className="error-text">{errors.email}</span>}
                            </div>
                        </div>
                        <div className="form-row">
                            <div className="form-group">
                                <div className="form-label-input">
                                    <label htmlFor="phone">Phone Number <span className="required">*</span></label>
                                    <input
                                        type="text"
                                        name="phone"
                                        id="phone"
                                        placeholder="Phone Number"
                                        value={formData.phone}
                                        onChange={handleChange}
                                        className="form-input"
                                    />
                                </div>
                                {errors.phoneNumber && <span className="error-text">{errors.phoneNumber}</span>}
                            </div>
                            <div className="form-group">
                                <div className="form-label-input">
                                    <label htmlFor="password">Password <span className="required">*</span></label>
                                    <input
                                        type="password"
                                        name="password"
                                        id="password"
                                        placeholder="Password"
                                        value={formData.password}
                                        onChange={handleChange}
                                        className="form-input"
                                    />
                                </div>
                                {errors.password && <span className="error-text">{errors.password}</span>}
                            </div>
                        </div>
                        <div className="form-row">
                            <div className="form-group">
                                <div className="form-label-input">
                                    <label htmlFor="confirmPassword">Confirm Password <span className="required">*</span></label>
                                    <input
                                        type="password"
                                        name="confirmPassword"
                                        id="confirmPassword"
                                        placeholder="Confirm Password"
                                        value={formData.confirmPassword}
                                        onChange={handleChange}
                                        className="form-input"
                                    />
                                </div>
                                {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                            </div>
                        </div>
                        
                        <div className="form-row button-container-edit">
                            <button type="submit" className="save-button">
                                Save
                            </button>
                            <button type="button" className="cancel-button" onClick={onClose}>
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        );
    };

    export default EditUserForm;


// File: components\EditVolunteerForm.jsx
import React, { useState, useEffect } from 'react';
import '../styles/userForm.css';

const EditVolunteerForm = ({ user, onClose }) => {
    const [formData, setFormData] = useState({
        fullName: '',
        email: '',
        phoneNumber: '',
        password: '',
        confirmPassword: '',
        cnic: '',
    });
    const [errors, setErrors] = useState({});

    // Initialize form data with user prop on mount or when user changes
    useEffect(() => {
        if (user) {
            setFormData({
                fullName: user.name || '',
                email: user.email || '',
                phoneNumber: user.phone || '',
                cnic: user.cnic || '',
                password: '', // Leave password empty for security
                confirmPassword: ''
            });
        }
    }, [user]);

    // Function to handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        
        // Format CNIC field to XXXXX-XXXXXX-X format
        if (name === 'cnic') {
            let formattedValue = value.replace(/\D/g, ''); // Remove non-digit characters
            if (formattedValue.length > 5) {
                formattedValue = formattedValue.slice(0, 5) + '-' + formattedValue.slice(5);
            }
            if (formattedValue.length > 12) {
                formattedValue = formattedValue.slice(0, 12) + '-' + formattedValue.slice(12, 13);
            }
            setFormData({
                ...formData,
                [name]: formattedValue
            });
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };

    // Function to validate the form
    const validate = () => {
        const newErrors = {};

        // Validate full name (only letters and max length 50)
        if (!/^[A-Za-z\s]{1,50}$/.test(formData.fullName)) {
            newErrors.fullName = 'Full Name should contain only letters.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address.';
        }

        // Validate phone number (11 digits)
        if (!/^\d{11}$/.test(formData.phoneNumber)) {
            newErrors.phoneNumber = 'Phone Number should contain 11 digits.';
        }

        // Validate password (minimum 6 characters)
        if (formData.password && formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters long.';
        }

        // Validate confirm password (must match password)
        if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match.';
        }

        // Validate CNIC (XXXXX-XXXXXX-X format)
        if (!/^\d{5}-\d{7}-\d{1}$/.test(formData.cnic)) {
            newErrors.cnic = 'CNIC should be in the format XXXXX-XXXXXXX-X.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Function to handle form submission
    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) {
            console.log('Form submitted:', formData);
            // Submit form or perform desired action
        }
    };

    return (
        <div className='userForm-container'>
            <div className="main-content">
                <h2>Edit Volunteer</h2>
                <form className="user-form" onSubmit={handleSubmit}>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="fullName">Full Name <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="fullName"
                                    id="fullName"
                                    placeholder="Full Name"
                                    value={formData.fullName}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.fullName && <span className="error-text">{errors.fullName}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="email">Email Address <span className="required">*</span></label>
                                <input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email Address"
                                    value={formData.email}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.email && <span className="error-text">{errors.email}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="phoneNumber">Phone Number <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="phoneNumber"
                                    id="phoneNumber"
                                    placeholder="Phone Number"
                                    value={formData.phoneNumber}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.phoneNumber && <span className="error-text">{errors.phoneNumber}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="password">Password</label>
                                <input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.password && <span className="error-text">{errors.password}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="confirmPassword">Confirm Password</label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    id="confirmPassword"
                                    placeholder="Confirm Password"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="cnic">CNIC <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="cnic"
                                    id="cnic"
                                    placeholder="CNIC (XXXXX-XXXXXX-X)"
                                    value={formData.cnic}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength="15" // Max length for CNIC format
                                />
                            </div>
                            {errors.cnic && <span className="error-text">{errors.cnic}</span>}
                        </div>
                    </div>
                    <div className="form-row button-container-edit">
                        <button type="submit" className="save-button">
                            Save
                        </button>
                        <button type="button" className="cancel-button" onClick={onClose}>
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditVolunteerForm;


// File: components\IssueApprovalModal.jsx
import React, { useState } from 'react';
import '../styles/b.css';
const ApproveModal = ({ issue, onClose, onAssignTask }) => {
    const [volunteers, setVolunteers] = useState(1); // Default value for volunteers
  
    const handleSubmit = () => {
      if (volunteers > 0) {
        onAssignTask(issue._id, volunteers); // Call onAssignTask when assigning task
      } else {
        alert("The number of volunteers must be greater than zero.");
      }
    };
  
    return (
      <div className="issue-details-modal">
        <div className="modal-header">
          <h2>Assign Task</h2>
          <button className="close-button" onClick={onClose}>X</button>
        </div>
        <div className="modal-content">
          <form>
            <div className="form-group">
              <label>Issue Type:</label>
              <input type="text" value={issue.issueType} readOnly />
            </div>
  
            <div className="form-group">
              <label>Reported By:</label>
              <input type="text" value={issue.reportedBy.name} readOnly />
            </div>
  
            <div className="form-group">
              <label>Description:</label>
              <textarea value={issue.description} readOnly></textarea>
            </div>
  
            <div className="form-group">
              <label>Number of Volunteers Required:</label>
              <input
                type="number"
                min="1"
                value={volunteers}
                onChange={(e) => setVolunteers(e.target.value)}
              />
            </div>
  
            <div className="form-actions">
              <button id='assignTask' type="button" onClick={handleSubmit}>Assign Task</button>
              <button id='cancel' type="button" onClick={onClose}>Cancel</button>
            </div>
          </form>
        </div>
      </div>
    );
  };
  

export default ApproveModal;


// File: components\IssueDetailsModal.jsx
import React from 'react';
import '../styles/b.css';
import { BASE_URL } from '../config';

// IssueDetailsForm Component to display issue details in a scrollable form
const IssueDetailsForm = ({ issue, onClose }) => {
  if (!issue) return null; // Return null if no issue is passed

  return (
    <div className="issue-details-modal">
      <div className="modal-header">
        <h2>Issue Details</h2>
        <button className="close-button" onClick={onClose}>X</button>
      </div>
      <div className="modal-content scrollable">
        <form>
          <div className="form-group">
            <label>Issue Type:</label>
            <input type="text" value={issue.issueType} readOnly />
          </div>

          <div className="form-group">
            <label>Reported By:</label>
            <input type="text" value={issue.reportedBy.name} readOnly />
          </div>

          <div className="form-group">
            <label>Email:</label>
            <input type="email" value={issue.reportedBy.email} readOnly />
          </div>

          <div className="form-group">
            <label>Reported Date:</label>
            <input type="text" value={new Date(issue.createdAt).toLocaleString('en-GB')} readOnly />
          </div>

          <div className="form-group">
            <label>Description:</label>
            <textarea value={issue.description} readOnly></textarea>
          </div>

          <div className="form-group">
            <label>Location:</label>
            <input type="text" value={`${issue.location?.latitude}, ${issue.location?.longitude}`} readOnly />
          </div>

          {issue.media.length > 0 && (
            <div className="form-group">
              <label>Media Files:</label>
              {issue.media.map((mediaItem, index) => (
                <div key={index} className="media-item">
                  {console.log(`${BASE_URL}/${mediaItem.uri}`)} {/* Log the URI to check */}
                  {mediaItem.type === 'image' ? (
                    <img
                      src={`${BASE_URL}/${mediaItem.uri}`}  // Dynamically load image from backend
                      alt={`Media ${index + 1}`}
                      style={{ width: '50%', height: 'auto' }}
                      onError={(e) => (e.target.src = 'https://via.placeholder.com/500?text=Image+not+available')}
                    />
                  ) : mediaItem.type === 'video' ? (
                    <video controls style={{ width: '50%', height: 'auto' }}>
                      <source src={`${BASE_URL}/${mediaItem.uri}`} type="video/mp4" />
                      <p>Your browser does not support this video format. Please try a different browser or convert the video to a supported format like MP4.</p>
                    </video>
                  ) : (
                    <p>Unsupported media type</p>
                  )}
                </div>
              ))}
            </div>
          )}

          <div className="form-actions">
            <button type="button" onClick={onClose}>Close</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default IssueDetailsForm;


// File: components\IssuePage.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BASE_URL } from '../config';
import Sidebar from './Sidebar'; // Import the Sidebar component
import '../styles/ManageProfile.css'; // Use ManageProfile.css for consistent styling

const IssuePage = () => {
  const [categoryName, setCategoryName] = useState('');
  const [categories, setCategories] = useState([]);
  const [errorMessage, setErrorMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [showCategories, setShowCategories] = useState(false); // Toggle state for categories visibility

  // Fetch categories from Firebase
  useEffect(() => {
    axios.get(`${BASE_URL}/api/issues/categories`)
      .then((response) => {
        setCategories(Object.values(response.data.categories || {}));
      })
      .catch((error) => {
        console.error('Error fetching categories:', error);
      });
  }, []);

  // Add new category to Firebase
  const handleAddCategory = (e) => {
    e.preventDefault();
    setErrorMessage('');
    setSuccessMessage('');

    if (!categoryName.trim()) {
      setErrorMessage('Category name cannot be empty.');
      return;
    }

    axios.post(`${BASE_URL}/api/issues/addCategory`, { categoryName })
      .then((response) => {
        console.log('Category added:', response.data);
        setSuccessMessage('Category added successfully!');
        setCategoryName('');
        // Refetch categories after adding new one
        axios.get(`${BASE_URL}/api/issues/categories`)
          .then((response) => {
            setCategories(Object.values(response.data.categories || {}));
          });
      })
      .catch((error) => {
        console.error('Error adding category:', error);
        setErrorMessage('Failed to add category. Please try again.');
      });
  };

  // Toggle category visibility
  const toggleCategories = () => {
    setShowCategories((prev) => !prev);
  };

  return (
    <div className="manage-profile-container"> {/* Main container for sidebar and content */}
      <Sidebar /> {/* Sidebar component */}
      <div className="main-content">
        <header className="header">
          <h1>Issue Categories</h1>
        </header>
        <div className="profile-form-container">
          <form onSubmit={handleAddCategory} className="profile-form">
            <div className="form-group">
              <label>Category Name</label>
              <input
                type="text"
                value={categoryName}
                onChange={(e) => setCategoryName(e.target.value)}
                placeholder="Enter category" // Added placeholder
                required
              />
            </div>
            
            <button type="submit" className="custom-button form-button">Add Category</button>
            
            {successMessage && <p className="success-message">{successMessage}</p>}
            {errorMessage && <p className="error-message">{errorMessage}</p>}
          </form>

          {/* Button to show/hide categories */}
          <button onClick={toggleCategories} className="custom-button form-button">
            {showCategories ? 'Hide Categories' : 'Show Categories'}
          </button>

          {showCategories && (
            <>
              <h2 className="issue-subtitle">Categories:</h2>
              {/* Scrollable list of categories */}
              <div className="scrollable-list">
                <ul className="issue-list">
                  {categories.map((category, index) => (
                    <li key={index} className="issue-item">
                      {category.label}
                    </li>
                  ))}
                </ul>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default IssuePage;


// File: components\IssueTable.jsx
import React, { useState } from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { IconButton, Menu, MenuItem, Box } from '@mui/material';
import MoreVertIcon from '@mui/icons-material/MoreVert';

const IssueTable = ({ rows, onView, onReject, showReject, showApprove , onApprove = true }) => { // Default showReject to true
  const columns = [
    { field: 'issueType', headerName: 'Issue Type', headerAlign: 'center', align: 'center', width: 200 },
    { field: 'description', headerName: 'Description', width: 300, renderCell: (params) => <span>{params.value}</span> },
    { field: 'name', headerName: 'Reported By', headerAlign: 'center', align: 'center', width: 200 },
    { field: 'date', headerName: 'Reported Date', headerAlign: 'center', align: 'center', width: 180 },
    { field: 'actions', headerName: 'Actions', headerAlign: 'center', align: 'center', width: 150, renderCell: (params) => (
      <ActionMenu id={params.row._id} onView={onView} onReject={onReject} onApprove={onApprove} showApprove={showApprove}  showReject={showReject} /> // Pass showReject
    ) },
  ];

  return (
    <Box
      sx={{
        height: 500,
        width: '100%',
        '& .MuiDataGrid-root': {
          backgroundColor: '#ffffff',
        },
        '& .MuiDataGrid-columnHeaders': {
          backgroundColor: '#f5f5f5',
        },
        '& .MuiDataGrid-cell': {
          backgroundColor: '#ffffff',
        },
        '& .MuiDataGrid-footerContainer': {
          borderTop: '1px solid #e0e0e0',
          paddingRight: '16px',
        },
      }}
    >
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        getRowId={(row) => row._id}
        disableSelectionOnClick
        disableColumnResize
      />
    </Box>
  );
};

// ActionMenu Component to handle actions for each issue
const ActionMenu = ({ id, onView, onReject, onApprove, showReject, showApprove }) => {
  const [anchorEl, setAnchorEl] = useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleReject = async () => {
    await onReject(id);
    handleClose();
  };

  const handleApprove = () => {
    onApprove(id); // Trigger the approval process
    handleClose();
  };

  return (
    <>
      <IconButton onClick={handleClick}>
        <MoreVertIcon />
      </IconButton>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        <MenuItem onClick={() => { onView(id); handleClose(); }}>See Full Details</MenuItem>
        {showReject && <MenuItem onClick={handleReject}>Reject</MenuItem>}
        {showApprove && < MenuItem onClick={handleApprove}>Approve</MenuItem> }
      </Menu>
    </>
  );
};


export default IssueTable;


// File: components\Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/Auth.css'; // Your CSS file path

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${BASE_URL}/api/auth/login`, { email, password });
      localStorage.setItem('token', response.data.token);
      navigate('/dashboard');
    } catch (err) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="container">
      <div className="left-section">
      </div>
      <div className="right-section">
        <div className="login-box">
          <h2>Login</h2>
          <form onSubmit={handleLogin}>
            <div className="input-container">
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="input-container">
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            {error && <p className="error">{error}</p>}
            <button type="submit" className="login-button">Login</button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;


// File: components\Logout.jsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const Logout = () => {
  const myNavigation = useNavigate();

  useEffect(() => {
    // Clear the token from localStorage (or any other storage)
    localStorage.removeItem('token');

    // Redirect the user to the login page
    myNavigation('/login');
  }, [myNavigation]);

  return (
    <div>
      <h2>Logging you out...</h2>
    </div>
  );
};

export default Logout;


// File: components\ManageCharity.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Sidebar from './Sidebar';
import { BASE_URL } from '../config';
import '../styles/ManageProfile.css'; // Assuming consistent design

const CharityProjects = () => {
  const [projects, setProjects] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [editMode, setEditMode] = useState(null);
  const [editedTitle, setEditedTitle] = useState('');

  // Fetch charity projects from the server
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const token = localStorage.getItem('token'); // Get the token from localStorage or state
        const response = await axios.get(`${BASE_URL}/api/charityProjects`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        setProjects(response.data.data);
      } catch (err) {
        setError('Failed to load charity projects. Please try again later.');
      }
    };

    fetchProjects();
  }, []);

  // Function to toggle the disable/enable status of a project
  const toggleProjectStatus = async (projectId) => {
    try {
      const token = localStorage.getItem('token'); // Get the token from localStorage or state
      const response = await axios.patch(
        `${BASE_URL}/api/charityProjects/${projectId}/toggle-status`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      
      // Ensure that the response from the API confirms the state change
      if (response.status === 200) {
        setProjects((prevProjects) =>
          prevProjects.map((project) =>
            project._id === projectId ? { ...project, disabled: !project.disabled } : project
          )
        );
        setSuccess('Project status updated successfully.');
      } else {
        throw new Error('Failed to update status in the database.');
      }
    } catch (err) {
      setError('Failed to update project status. Please try again.');
    }
  };
  
  // Function to enable edit mode for a specific project
  const handleEditClick = (projectId, title) => {
    setEditMode(projectId);
    setEditedTitle(title);
  };

  // Function to update the project title
  const updateProjectTitle = async (projectId) => {
    try {
      const token = localStorage.getItem('token'); // Get the token from localStorage or state
      const response = await axios.patch(
        `${BASE_URL}/api/charityProjects/${projectId}/update-title`,
        { title: editedTitle },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      // Update the projects state after the successful API call
      setProjects((prevProjects) =>
        prevProjects.map((project) =>
          project._id === projectId ? { ...project, title: editedTitle } : project
        )
      );

      // Exit edit mode and show success message
      setEditMode(null);
      setSuccess('Project title updated successfully.');
    } catch (err) {
      setError('Failed to update project title. Please try again.');
    }
  };

  return (
    <div className="manage-profile-container">
      <Sidebar />
      <div className="main-content">
        <header className="header">
          <h1>Charity Projects</h1>
        </header>
        <div className="profile-form-container">
          {error && <p className="error-message">{error}</p>}
          {success && <p className="success-message">{success}</p>}

          <div className="charity-project-list">
            {projects.map((project) => (
              <div key={project._id} className="project-card">
                {/* Edit Mode for the Project */}
                {editMode === project._id ? (
                  <div className="edit-project">
                    <input
                      type="text"
                      value={editedTitle}
                      onChange={(e) => setEditedTitle(e.target.value)}
                      className="edit-input"
                    />
                    <div className="button-group">
                      <button
                        onClick={() => updateProjectTitle(project._id)}
                        className="custom-button save-button"
                      >
                        Save
                      </button>
                      <button
                        onClick={() => setEditMode(null)}
                        className="custom-button cancel-button"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="project-info">
                    <h3>{project.title}</h3>
                    <p>{project.description}</p>
                    <div className="button-group">
                      <button
                        onClick={() => handleEditClick(project._id, project.title)}
                        className="custom-button edit-button"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => toggleProjectStatus(project._id)}
                        className={`custom-button ${project.disabled ? 'enable-button' : 'disable-button'}`}
                      >
                        {project.disabled ? 'Enable' : 'Disable'}
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CharityProjects;


// File: components\Poll.jsx
import React, { useState } from 'react';
import axios from 'axios';
import Sidebar from './Sidebar';
import '../styles/ManageProfile.css';    
import { BASE_URL } from '../config';
const CreatePoll = () => {
  const [name, setName] = useState('');
  const [options, setOptions] = useState(['', '']);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const addOption = () => setOptions([...options, '']);
  const removeOption = (index) => {
    setOptions(options.filter((_, idx) => idx !== index));
  };

  const handleOptionChange = (index, value) => {
    const newOptions = [...options];
    newOptions[index] = value;
    setOptions(newOptions);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setMessage('');

    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `${BASE_URL}/api/polls`,
        { name, options, startDate, endDate },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      setMessage('Poll created successfully!');
      setName('');
      setOptions(['', '']);
      setStartDate('');
      setEndDate('');
    } catch (err) {
      setError('Failed to create poll. Please try again.');
    }
  };

  return (
    <div className="manage-profile-container">
      <Sidebar />
      <div className="main-content">
        <header className="header">
          <h1>Create Poll</h1>
        </header>
        <div className="profile-form-container">

        <form onSubmit={handleSubmit} className="profile-form">
          <div className="form-group">
            <label>Poll Name</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>Options</label>
            {options.map((option, index) => (
              <div key={index}>
                <input
                  type="text"
                  value={option}
                  onChange={(e) => handleOptionChange(index, e.target.value)}
                  required
                />
                {index > 1 && <button type="button" className='pollBtn' onClick={() => removeOption(index)}>Remove</button>}
              </div>
            ))}
            <button type="button" className='pollBtn' onClick={addOption}>Add Option</button>
          </div>

          <div className="form-group">
            <label>Start Date</label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>End Date</label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              required
            />
          </div>

          <button type="submit" className="custom-button">Create Poll</button>

          {message && <p className="success-message">{message}</p>}
          {error && <p className="error-message">{error}</p>}
        </form>
        </div>
      </div>
    </div>
  );
};

export default CreatePoll;


// File: components\PollManagement.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Pie } from 'react-chartjs-2';
import Sidebar from './Sidebar';
import '../styles/ManageProfile.css';
import { BASE_URL } from '../config';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const PollManagement = () => {
  const [activePolls, setActivePolls] = useState([]);
  const [endedPolls, setEndedPolls] = useState([]);
  const [pollResults, setPollResults] = useState({});
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [showActivePolls, setShowActivePolls] = useState(true);
  const [openPollDetails, setOpenPollDetails] = useState({}); // Track open details for each poll

  // Fetch polls from the server
  useEffect(() => {
    const fetchPolls = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/polls`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setActivePolls(response.data.polls.active);
        setEndedPolls(response.data.polls.ended);
      } catch (err) {
        setError('Failed to load polls. Please try again later.');
      }
    };

    fetchPolls();
  }, []);

  // Toggle voting status
  const toggleVoteStatus = async (pollId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/polls/${pollId}/disable-votes`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setMessage(response.data.message);

      // Refresh polls after status change
      setActivePolls((prevPolls) =>
        prevPolls.map((poll) =>
          poll._id === pollId ? { ...poll, disableVotes: !poll.disableVotes } : poll
        )
      );
    } catch (err) {
      setError('Failed to update voting status. Please try again.');
    }
  };

  // Toggle between showing active and ended polls
  const togglePollView = () => {
    setShowActivePolls(!showActivePolls);
  };

  // Toggle individual poll details
  const togglePollDetails = (pollId) => {
    setOpenPollDetails((prevDetails) => ({
      ...prevDetails,
      [pollId]: !prevDetails[pollId],
    }));
  };

  // Toggle showing or hiding poll results
  const toggleResultsVisibility = (pollId) => {
    if (pollResults[pollId]) {
      // Hide results if already visible
      setPollResults((prevResults) => ({
        ...prevResults,
        [pollId]: null,
      }));
    } else {
      // Fetch and show results if not visible
      viewResults(pollId);
    }
  };

  // Function to view results of a poll
  const viewResults = async (pollId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${BASE_URL}/api/votes/count/${pollId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setPollResults((prevResults) => ({
        ...prevResults,
        [pollId]: response.data.votes,
      }));
    } catch (err) {
      setError('Failed to load poll results.');
    }
  };

  // Function to create chart data
  const getChartData = (pollId) => {
    const results = pollResults[pollId];
    if (!Array.isArray(results) || results.length === 0) {
      return {
        labels: [],
        datasets: [
          {
            label: 'Votes',
            data: [],
            backgroundColor: [],
          },
        ],
      };
    }

    return {
      labels: results.map((r) => `${r.optionText} (${r.count} votes)`), // Display option text and number of votes
      datasets: [
        {
          label: 'Votes',
          data: results.map((r) => r.count || 0), // Use count instead of votes
          backgroundColor: [
            '#ff6384', '#36a2eb', '#ffcd56', '#4bc0c0', '#9966ff', '#ff9f40'
          ],
          hoverBackgroundColor: [
            '#ff8396', '#58c3ff', '#ffe083', '#66e6d8', '#b399ff', '#ffaf69'
          ],
          borderWidth: 1,
          borderColor: '#fff',
        },
      ],
    };
  };

  // Options to customize the pie chart
  const getChartOptions = () => {
    return {
      responsive: true,
      plugins: {
        legend: {
          display: true,
          position: 'bottom',
          labels: {
            font: {
              size: 14,
            },
            color: '#444',
          },
        },
        tooltip: {
          callbacks: {
            label: function (tooltipItem) {
              return `${tooltipItem.label}`;
            },
          },
        },
      },
    };
  };

  // Periodically update poll results
  useEffect(() => {
    // Interval for fetching poll results every 5 seconds
    const interval = setInterval(() => {
      Object.keys(openPollDetails).forEach((pollId) => {
        // If poll details are open, fetch its results
        if (openPollDetails[pollId]) {
          viewResults(pollId);
        }
      });
    }, 5000); // Fetch results every 5 seconds

    // Clear the interval on component unmount
    return () => clearInterval(interval);
  }, [openPollDetails]);

  return (
    <div className="manage-profile-container">
      <Sidebar />
      <div className="main-content">
        <header className="header">
          <h1>Manage Polls</h1>
          {/* Filter Button */}
          <button className="filter-button" onClick={togglePollView}>
            {showActivePolls ? 'Show Ended Polls' : 'Show Active Polls'}
          </button>
        </header>
        <div className="profile-form-container">
          {/* Conditionally Render Polls Based on State */}
          {showActivePolls ? (
            <>
              <h2>Active Polls</h2>
              {activePolls.length > 0 ? (
                activePolls.map((poll, index) => (
                  <div key={poll._id} className="poll-card">
                    <div
                      className="poll-name"
                      onClick={() => togglePollDetails(poll._id)}
                    >
                      <strong>{index + 1}. {poll.name}</strong>
                    </div>
                    {openPollDetails[poll._id] && (
                      <div className="poll-details">
                        <p>
                          <strong>Start Date:</strong> {new Date(poll.startDate).toLocaleDateString()}
                        </p>
                        <p>
                          <strong>End Date:</strong> {new Date(poll.endDate).toLocaleDateString()}
                        </p>
                        <p>
                          <strong>Status:</strong> {poll.disableVotes ? 'Voting Disabled' : 'Voting Enabled'}
                        </p>
                        <button
                          className="custom-button"
                          onClick={() => toggleVoteStatus(poll._id)}
                          disabled={new Date(poll.endDate) < new Date()}
                        >
                          {poll.disableVotes ? 'Enable Voting' : 'Disable Voting'}
                        </button>
                        <button
                          className="view-results-button"
                          onClick={() => toggleResultsVisibility(poll._id)}
                        >
                          {pollResults[poll._id] ? 'Hide Results' : 'View Results'}
                        </button>
                        {pollResults[poll._id] && (
                          <div className="chart-container">
                            <Pie data={getChartData(poll._id)} options={getChartOptions()} />
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))
              ) : (
                <p>No active polls available.</p>
              )}
            </>
          ) : (
            <>
              <h2>Ended Polls</h2>
              {endedPolls.length > 0 ? (
                endedPolls.map((poll, index) => (
                  <div key={poll._id} className="poll-card">
                    <div
                      className="poll-name"
                      onClick={() => togglePollDetails(poll._id)}
                    >
                      <strong>{index + 1}. {poll.name}</strong>
                    </div>
                    {openPollDetails[poll._id] && (
                      <div className="poll-details">
                        <p>
                          <strong>Start Date:</strong> {new Date(poll.startDate).toLocaleDateString()}
                        </p>
                        <p>
                          <strong>End Date:</strong> {new Date(poll.endDate).toLocaleDateString()}
                        </p>
                        <p><strong>Status:</strong> Ended</p>
                        <p><strong>Voting:</strong> {poll.disableVotes ? 'Disabled' : 'Enabled'}</p>
                        <button
                          className="custom-button view-results-button"
                          onClick={() => toggleResultsVisibility(poll._id)}
                        >
                          {pollResults[poll._id] ? 'Hide Results' : 'View Results'}
                        </button>
                        {pollResults[poll._id] && (
                          <div className="chart-container">
                            <Pie data={getChartData(poll._id)} options={getChartOptions()} />
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))
              ) : (
                <p>No ended polls available.</p>
              )}
            </>
          )}

          {message && <p className="success-message">{message}</p>}
          {error && <p className="error-message">{error}</p>}
        </div>
      </div>
    </div>
  );
};

export default PollManagement;


// File: components\PorfileManage.jsx
import React, { useState, useEffect } from 'react';
import Sidebar from './Sidebar'; // Import the Sidebar component
import '../styles/ManageProfile.css'; // CSS file for ManageProfile styling
import axios from 'axios'; // For making API requests
import { BASE_URL } from '../config'; // Assuming you have a BASE_URL in config.js

const ManageProfile = () => {
  // States for form fields
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [isEditing, setIsEditing] = useState(false); // State to control edit mode

  // Fetch user details when component mounts
  useEffect(() => {
    const fetchUserDetails = async () => {
      try {
        const token = localStorage.getItem('token');
        console.log('Retrieved Token:', token); // Log the token
  
        // Check if token is available
        if (!token) {
          setError('No token found, please login.');
          return;
        }
  
        // Make the API request to fetch user profile
        const response = await axios.get(`${BASE_URL}/api/user/profile`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        console.log('Profile Update Response:', response.data);
  
        console.log('API Response:', response); // Log the full response
  
        // Check if user data is in the response and set the state
        if (response.data && response.data.user) {
          const { name, email, phone } = response.data.user;
          setName(name);
          setEmail(email);
          setPhone(phone);
        } else {
          setError('Failed to load user details from the response.');
          console.log('Unexpected response structure:', response.data); // Log unexpected structure
        }
      } catch (err) {
        // Log the error response for detailed debugging
        if (err.response) {
          // The request was made and the server responded with a status code
          console.error('Error Response Data:', err.response.data);
          console.error('Error Response Status:', err.response.status);
          console.error('Error Response Headers:', err.response.headers);
        } else if (err.request) {
          // The request was made but no response was received
          console.error('Error Request:', err.request);
        } else {
          // Something else happened in setting up the request
          console.error('Error Message:', err.message);
        }
        setError('Failed to load user details. Please check your connection or login again.');
      }
    };
  
    fetchUserDetails();
  }, []); 
  
  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');

    try {
      const token = localStorage.getItem('token');
      await axios.put(
        `${BASE_URL}/api/user/profile`,
        {
          name,
          email,
          phone,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setMessage('Profile updated successfully!');
      setIsEditing(false); // Exit editing mode after successful update
    } catch (err) {
      setError('Failed to update profile.');
    }
  };

  // Toggle edit mode
  const handleEditClick = () => {
    setIsEditing(true); // Enable editing mode
    setMessage("");
  };

  return (
    <div className="manage-profile-container">
      {/* Reusable Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="main-content">
        {/* Header */}
        <header className="header">
          <h1>Manage Profile</h1>
        </header>

        {/* Profile Form */}
        <div className="profile-form-container">
          <form onSubmit={handleSubmit} className="profile-form">
            <div className="form-group">
              <label htmlFor="name">Name</label>
              <input
                type="text"
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                disabled={!isEditing} // Disable input when not in edit mode
              />
            </div>
            <div className="form-group">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={!isEditing} // Disable input when not in edit mode
              />
            </div>
            <div className="form-group">
              <label htmlFor="phone">Phone</label>
              <input
                type="text"
                id="phone"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                required
                disabled={!isEditing} // Disable input when not in edit mode
              />
            </div>

            {/* Display either Edit or Save Changes buttons */}
            {isEditing ? (
              <button type="button" onClick={handleSubmit} className="custom-button">Save Changes</button>
            ) : (
              <button type="button" className="custom-button" onClick={handleEditClick}>Edit Profile</button>
            )}

            {message && <p className="success-message">{message}</p>}
            {error && <p className="error-message">{error}</p>}
          </form>
        </div>
      </div>
    </div>
  );
};

export default ManageProfile;


// File: components\Register.jsx
import React, { useState } from 'react';
import axios from 'axios';
import '../styles/Auth.css'; // Your CSS file path
import { BASE_URL } from '../config';

const Register = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [phone, setPhone] = useState('');
  const [role, setRole] = useState('admin'); // Default role set to admin
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Front-end Validation
  const validateForm = () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Simple email regex pattern
    const phoneRegex = /^\d{11}$/; // Regex for exactly 11 digits
    
    if (password.length < 6) {
      setError('Password must be at least 6 characters long.');
      return false;
    }

    if (!emailRegex.test(email)) {
      setError('Please enter a valid email address.');
      return false;
    }

    if (!phoneRegex.test(phone)) {
      setError('Phone number must be exactly 11 digits.');
      return false;
    }

    return true;
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    // Check validation before making the request
    if (!validateForm()) {
      return; // If validation fails, exit the function
    }

    try {
      const response = await axios.post(`${BASE_URL}/api/auth/register`, {
        name,
        email,
        password,
        phone,
        role
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      setSuccess('Registration successful!');
      setName('');
      setEmail('');
      setPassword('');
      setPhone('');
    } catch (err) {
      setError('Registration failed. Please try again.');
    }
  };

  return (
    <div className="container">
      <div className="left-section">
      </div>
      <div className="right-section">
        <div className="login-box">
          <h2>Register</h2>
          <form onSubmit={handleRegister}>
            <div className="input-container">
              <input
                type="text"
                placeholder="Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
            <div className="input-container">
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="input-container">
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="input-container">
              <input
                type="text"
                placeholder="Phone"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                required
              />
            </div>
            {error && <p className="error">{error}</p>}
            {success && <p className="success">{success}</p>}
            <button type="submit" className="login-button">Register</button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Register;

// File: components\ServiceProviderForm.jsx
import React, { useState } from 'react';
import '../styles/userForm.css';
import Sidebar from './Sidebar';
import axios from 'axios';
import { BASE_URL } from '../config';
import { useNavigate } from 'react-router-dom';
const ServiceProviderForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: '',
        cnic: '',
        serviceCategory: '',
        role: 'serviceProvider' // State for the new dropdown field
    });
    const [successMessage, setSuccessMessage] = useState('');
    const [errors, setErrors] = useState({});

    // Function to handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;
    
        // Format CNIC field to XXXXX-XXXXXXX-X format
        if (name === 'cnic') {
            let formattedValue = value.replace(/\D/g, ''); // Remove non-digit characters
    
            // Add first dash after 5 digits
            if (formattedValue.length > 5) {
                formattedValue = formattedValue.slice(0, 5) + '-' + formattedValue.slice(5);
            }
            // Add second dash after 12 digits (5 + 7)
            if (formattedValue.length > 13) {
                formattedValue = formattedValue.slice(0, 13) + '-' + formattedValue.slice(13, 14);
            }
    
            // Limit CNIC to the maximum of 15 characters (XXXXX-XXXXXXX-X)
            setFormData({
                ...formData,
                [name]: formattedValue.slice(0, 15)
            });
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };
    

    // Function to validate the form
    const validate = () => {
        const newErrors = {};

        // Validate full name (only letters and max length 50)
        if (!/^[A-Za-z\s]{1,50}$/.test(formData.name)) {
            newErrors.name = 'Full Name should contain only letters.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address.';
        }

        // Validate phone number (11 digits)
        if (!/^\d{11}$/.test(formData.phone)) {
            newErrors.phone = 'Phone Number should contain 11 digits.';
        }

        // Validate password (minimum 6 characters)
        if (formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters long.';
        }

        // Validate confirm password (must match password)
        if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match.';
        }

        // Validate CNIC (XXXXX-XXXXXX-X format)
        if (!/^\d{5}-\d{7}-\d{1}$/.test(formData.cnic)) {
            newErrors.cnic = 'CNIC should be in the format XXXXX-XXXXXXX-X.';
        }

        // Validate service type selection
        if (!formData.serviceCategory) {
            newErrors.serviceCategory = 'Please select a service type.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Function to handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (validate()) {
            try {
                const token = localStorage.getItem('token');
                const { confirmPassword, ...requestData } = formData;
                const response = await axios.post(`${BASE_URL}/api/users/registerusers`, 
                    requestData, 
                    {
                        headers: {
                            Authorization: `Bearer ${token}`,
                        }
                    }
                );
                if (response.data.success) {
                    setSuccessMessage('User added successfully!');
                    navigate('/serviceProviders');
                    setFormData({
                        name: '',
                        email: '',
                        phone: '',
                        password: '',
                        confirmPassword: '',
                        cnic: '',
                        serviceCategory: '',
                        role: 'serviceProvider'
                    });
                }
            } catch (error) {
                console.error('Error adding user:', error.response?.data?.message || error.message);
                setErrors({ api: error.response?.data?.message || 'Failed to add user. Please try again later.' });
            }
        }
    };

    return (
        <div className='userForm-container'>
            <Sidebar />
            <div className="main-content">
                <h2>Create Service Provider</h2>
                <form className="user-form" onSubmit={handleSubmit}>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="name">Full Name <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="name"
                                    id="name"
                                    placeholder="Full Name"
                                    value={formData.name}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.name && <span className="error-text">{errors.name}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="email">Email Address <span className="required">*</span></label>
                                <input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email Address"
                                    value={formData.email}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.email && <span className="error-text">{errors.email}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="phone">Phone Number <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="phone"
                                    id="phone"
                                    placeholder="Phone Number"
                                    value={formData.phone}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength='11'
                                />
                            </div>
                            {errors.phone && <span className="error-text">{errors.phone}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="password">Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.password && <span className="error-text">{errors.password}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="confirmPassword">Confirm Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    id="confirmPassword"
                                    placeholder="Confirm Password"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="cnic">CNIC <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="cnic"
                                    id="cnic"
                                    placeholder="CNIC (XXXXX-XXXXXX-X)"
                                    value={formData.cnic}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength="15" // Max length for CNIC format
                                />
                            </div>
                            {errors.cnic && <span className="error-text">{errors.cnic}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="serviceCategory">Service Type <span className="required">*</span></label>
                                <select
                                    name="serviceCategory"
                                    id="serviceCategory"
                                    value={formData.serviceCategory}
                                    onChange={handleChange}
                                    className="form-input"
                                >
                                    <option value="">Select Service Type</option>
                                    <option value="accidentManagement">Accident Management</option>
                                    <option value="vehicleAssistance">Vehicle Assistance</option>
                                </select>
                            </div>
                            {errors.serviceCategory && <span className="error-text">{errors.serviceCategory}</span>}
                        </div>
                    </div>
                    <div className="form-row button-container">
                        <button type="submit" className="submit-button">
                            + Add Service Provider
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default ServiceProviderForm;


// File: components\Sidebar.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faTachometerAlt,
  faUser,
  faCog,
  faListAlt,
  faPoll,
  faTasks,
  faHandsHelping,
  faSignOutAlt,
  faTools,
} from '@fortawesome/free-solid-svg-icons';
import '../styles/Sidebar.css';

const Sidebar = () => {
  const [isProfileOpen, setProfileOpen] = useState(false);
  const [isUserOpen , setUserOpen] = useState(false);
  const [isApprovals , setApprovals] = useState(false);
  const [isIssues , setIssues] = useState(false);
  const toggleProfileMenu = () => {
    setProfileOpen(!isProfileOpen);
  };
  const toggleIsUser =()=>{
    setUserOpen(!isUserOpen);
  }
  const toggleApprovls =()=>{
    setApprovals(!isApprovals);
  }
  const toggleIssues =()=>{
    setIssues(!isIssues);
  }

  return (
    <div className="sidebar">
      <h2>Communi Care</h2>
      <ul className="sidebar-links">
        <li>
          <Link to="/dashboard">
            <FontAwesomeIcon icon={faTachometerAlt} className="icon" /> Dashboard
          </Link>
        </li>
        <li onClick={toggleProfileMenu}>
          <Link>
            <FontAwesomeIcon icon={faUser} className="icon" /> Profile Management
          </Link>
          {isProfileOpen && (
            <ul className="submenu">
              <li>
                <Link to="/profileManage">
                  <FontAwesomeIcon icon={faUser} className="submenu-icon" /> My Profile
                </Link>
              </li>
              <li>
                <Link to="/changePassword">
                  <FontAwesomeIcon icon={faCog} className="submenu-icon" /> Change Password
                </Link>
              </li>
            </ul>
          )}
        </li>
        <li onClick={toggleIsUser}>
          <Link>
          <FontAwesomeIcon icon={faUser} className="icon" /> Users
          </Link>
          {isUserOpen &&(
            <ul className='submenu'>
              <li>
                <Link to='/normaluser'>
                  <FontAwesomeIcon icon={faUser} className="submenu-icon" />Normal Users
                </Link>
                <Link to='/volunteers'>
                  <FontAwesomeIcon icon={faHandsHelping} className="submenu-icon" />Volunteers
                </Link>
                <Link to='/serviceProviders'>
                  <FontAwesomeIcon icon={faTools} className="submenu-icon" />Service Providers
                </Link>

              </li>
            </ul>
          )}

        </li>

        <li onClick={toggleApprovls}>
          <Link>
          <FontAwesomeIcon icon={faUser} className="icon" /> User Approvals
          </Link>
          {isApprovals &&(
            <ul className='submenu'>
              <li>
                <Link to='/volunteerApprovals'>
                  <FontAwesomeIcon icon={faHandsHelping} className="submenu-icon" />Volunteers
                </Link>
                <Link to='/serviceApprovals'>
                  <FontAwesomeIcon icon={faTools} className="submenu-icon" />Service Providers
                </Link>

              </li>
            </ul>
          )}

        </li>

        <li>
          <Link to="/issues">
            <FontAwesomeIcon icon={faListAlt} className="icon" /> Issue Categories
          </Link>
        </li>
        <li>
          <Link to="/completedIssues">
            <FontAwesomeIcon icon={faListAlt} className="icon" /> Completed Issues
          </Link>
        </li><li>
          <Link to="/inprogressIssues">
            <FontAwesomeIcon icon={faListAlt} className="icon" /> Progress Reports
          </Link>
        </li>
        <li onClick={toggleIssues }>
          <Link>
          <FontAwesomeIcon icon={faUser} className="icon" /> Reported Issues
          </Link>
          {isIssues &&(
            <ul className='submenu'>
              <li>
                <Link to="/reportedissues">
                  <FontAwesomeIcon icon={faListAlt} className="icon" /> Pending Issues
                </Link>
                
                <Link to="/rejectedissues">
                  <FontAwesomeIcon icon={faListAlt} className="icon" /> Rejected Issues
                </Link>
                <Link to="/assignedtasks">
                 <FontAwesomeIcon icon={faListAlt} className="icon" /> Assigned Tasks
                 </Link>
              </li>
            </ul>
          )}
          </li>
        <li>
          <Link to="/poll">
            <FontAwesomeIcon icon={faPoll} className="icon" /> Poll
          </Link>
        </li>
        <li>
          <Link to="/pollManagement">
            <FontAwesomeIcon icon={faTasks} className="icon" /> Manage Polls
          </Link>
        </li>
        <li>
          <Link to="/charityProject">
            <FontAwesomeIcon icon={faHandsHelping} className="icon" /> Charity Projects
          </Link>
        </li>
        <li>
          <Link to="/manageCharity">
            <FontAwesomeIcon icon={faHandsHelping} className="icon" /> Manage Charity Projects
          </Link>
        </li>
        <li>
          <Link to="/logout">
            <FontAwesomeIcon icon={faSignOutAlt} className="icon" /> Logout
          </Link>
        </li>
      </ul>
    </div>
  );
};

export default Sidebar;


// File: components\TaskProgressModal.jsx
import React from 'react';
import '../styles/b.css';
import { BASE_URL } from '../config';

const TaskProgressModal = ({ issue, onClose }) => {
  if (!issue) return null;

  return (
    <div className="issue-details-modal">
      <div className="modal-header">
        <h2>Task Progress Details</h2>
        <button className="close-button" onClick={onClose}>X</button>
      </div>
      <div className="modal-content scrollable">
        <form>
          <div className="form-group">
            <label>Issue:</label>
            <input type="text" value={issue.description || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Reported By:</label>
            <input type="text" value={issue.reportedBy || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Status:</label>
            <input type="text" value={issue.status || 'N/A'} readOnly />
          </div>

          <div className="form-group">
            <label>Progress Updates:</label>
            <div className="progress-updates">
              {issue.progressUpdates?.length > 0 ? (
                issue.progressUpdates.map((update, index) => (
                  <div key={index} className="update-item">
                    <div className="form-group">
                      <label>Description:</label>
                      <textarea value={update.description || 'N/A'} readOnly></textarea>
                    </div>

                    <div className="form-group">
                      <label>Updated By:</label>
                      <input type="text" value={update.updatedBy.name || 'N/A'} readOnly />
                    </div>

                    <div className="form-group">
                      <label>Date:</label>
                      <input type="text" value={update.date ? new Date(update.date).toLocaleString('en-GB') : 'N/A'} readOnly />
                    </div>

                    {update.media?.length > 0 && (
                      <div className="form-group">
                        <label>Media Files:</label>
                        {update.media.map((mediaItem, idx) => (
                          <div key={idx} className="media-item">
                            {mediaItem.type === 'image' ? (
                              <img
                                src={`${BASE_URL}/${mediaItem.uri}`}
                                alt={`Media ${idx + 1}`}
                                style={{ width: '50%', height: 'auto' }}
                                onError={(e) => (e.target.src = 'https://via.placeholder.com/500?text=Image+not+available')}
                              />
                            ) : mediaItem.type === 'video' ? (
                              <video controls style={{ width: '50%', height: 'auto' }}>
                                <source src={`${BASE_URL}/${mediaItem.uri}`} type="video/mp4" />
                                <p>Your browser does not support this video format.</p>
                              </video>
                            ) : (
                              <p>Unsupported media type</p>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ))
              ) : (
                <p>No progress updates available</p>
              )}
            </div>
          </div>

          <div className="form-actions">
            <button type="button" onClick={onClose}>Close</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default TaskProgressModal;


// File: components\ToggleSwitch.jsx
import React from 'react';
import '../styles/ToggleSwitch.css';

const ToggleSwitch = ({ isActive, handleToggle }) => {
  return (
    <label className="switch">
      <input type="checkbox" checked={isActive} onChange={handleToggle} />
      <span className="slider round"></span>
      <span className="toggle-label">{isActive ? 'Active' : 'Inactive'}</span>
    </label>
  );
};

export default ToggleSwitch;


// File: components\userForm.jsx
import React, { useState } from 'react';
import '../styles/userForm.css';
import Sidebar from './Sidebar';
import axios from 'axios'; // Import axios
import { BASE_URL } from '../config'; // Assuming you have a config file for your base URL
import { useNavigate } from 'react-router-dom';

const UserForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: '',
        role: 'normal',
    });
    const [errors, setErrors] = useState({});
    const [successMessage, setSuccessMessage] = useState(''); // State to show success message
    
    // Function to handle input changes
    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });
    };

    // Function to validate the form
    const validate = () => {
        const newErrors = {};

        // Validate full name (only letters and max length 50)
        if (!/^[A-Za-z\s]{1,50}$/.test(formData.name)) {
            newErrors.name = 'Full Name should contain only letters.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address.';
        }

        // Validate phone number (11 digits)
        if (!/^\d{11}$/.test(formData.phone)) {
            newErrors.phone = 'Phone Number should contain 11 digits.';
        }

        // Validate password (minimum 6 characters)
        if (formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters long.';
        }

        // Validate confirm password (must match password)
        if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Function to handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (validate()) {
            try {
                const token = localStorage.getItem('token');
                const { confirmPassword, ...requestData } = formData;
                const response = await axios.post(`${BASE_URL}/api/users/registerusers`, 
                    requestData, 
                    {
                        headers: {
                            Authorization: `Bearer ${token}`,
                        }
                    }
                );

                // Show success message if request is successful
                if (response.data.success) {
                    setSuccessMessage('User added successfully!');
                    navigate('/normaluser');
                    setFormData({
                        name: '',
                        email: '',
                        phone: '',
                        password: '',
                        confirmPassword: '',
                        role: 'normal'
                    });
                }
            } catch (error) {
                console.error('Error adding user:', error);
                // Display backend validation error or general error
                setErrors({ api: error.response?.data?.message || 'Failed to add user. Please try again later.' });
            }
        }
    };

    return (
        <div className='userForm-container'>
            <Sidebar />
            <div className="main-content">
                <h2>Create User</h2>
                {successMessage && <p className="success-text">{successMessage}</p>}
                {errors.api && <p className="error-text">{errors.api}</p>}
                <form className="user-form" onSubmit={handleSubmit}>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="name">Full Name <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="name"
                                    id="name"
                                    placeholder="Full Name"
                                    value={formData.name} 
                                    onChange={handleChange}
                                    className="form-input"

                                />
                            </div>
                            {errors.name && <span className="error-text">{errors.name}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="email">Email Address <span className="required">*</span></label>
                                <input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email Address"
                                    value={formData.email} // Corrected value
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.email && <span className="error-text">{errors.email}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="phone">Phone Number <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="phone"
                                    id="phone"
                                    placeholder="Phone Number"
                                    value={formData.phone} // Corrected value
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength= '11'
                                />
                            </div>
                            {errors.phone && <span className="error-text">{errors.phone}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="password">Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.password && <span className="error-text">{errors.password}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="confirmPassword">Confirm Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    id="confirmPassword"
                                    placeholder="Confirm Password"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                        </div>
                    </div>
                    <div className="form-row button-container">
                        <button type="submit" className="submit-button">
                           + Add User
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default UserForm;


// File: components\UserTable.jsx
import React from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { Chip, IconButton, Menu, MenuItem, Box } from '@mui/material';
import MoreVertIcon from '@mui/icons-material/MoreVert';


const UserTable = ({ rows, onEdit, onDelete }) => {
  // Determine the user role based on the first row (assuming all rows have the same role type)
  const userType = rows[0]?.role || 'normal'; // Default to 'normal' if role is undefined

  // Define column configurations based on user type
  let columnWidths = {};
  
  if (userType === 'normal') {
    // Normal User column widths
    columnWidths = {
      name: 230,
      email: 230,
      phone: 230,
      role: 240,
      isAccepted: 0, // Not needed for normal users
      isActive: 120,
      actions: 150
    };
  } else if (userType === 'volunteer') {
    // Volunteer column widths
    columnWidths = {
        name: 180,
        email: 170,
        phone: 170,
        role: 180,
        isAccepted: 170,
        isActive: 170,
        actions: 160
    };
  } else if (userType === 'serviceProvider') {
    // Service Provider column widths
    columnWidths = {
      name: 180,
      email: 170,
      phone: 170,
      role: 180,
      isAccepted: 170,
      isActive: 170,
      actions: 160
    };
  }

  // Define columns based on the role
  const columns = [
    { field: 'name', headerName: 'Name', width: columnWidths.name },
    { field: 'email', headerName: 'Email', width: columnWidths.email },
    { field: 'phone', headerName: 'Contact', width: columnWidths.phone },
    { field: 'role', headerName: 'Role', width: columnWidths.role, headerAlign: 'center', align: 'center' },
    // Conditionally add `isAccepted` column only if user is not a normal user
    ...(userType !== 'normal' ? [{
      field: 'isAccepted',
      headerName: 'Verified',
      width: columnWidths.isAccepted,
       headerAlign: 'center', align: 'center',
      renderCell: (params) =>
        params.value ? <Chip label="Verified" color="success" /> : <Chip label="Pending" color="default" />
    }] : []),
    { field: 'isActive', headerName: 'Status', width: columnWidths.isActive, headerAlign: 'center', align: 'center', renderCell: (params) => (
      params.value ? <Chip label="Active" color="success" /> : <Chip label="Banned" color="error" />
    )},
    {
      field: 'actions',
      headerName: 'Actions',
      width: columnWidths.actions,
      headerAlign: 'center', align: 'center',
      renderCell: (params) => (
        <ActionMenu id={params.row._id} onEdit={onEdit} onDelete={onDelete} />
      )
    }
  ];

  return (
    <Box
      sx={{
        height: 500,
        width: '100%',
        overflowX: 'hidden',
        '& .MuiDataGrid-root': {
          backgroundColor: '#ffffff', // Table background color
        },
        '& .MuiDataGrid-columnHeaders': {
          backgroundColor: '#f5f5f5', // Header background color
        },
        '& .MuiDataGrid-cell': {
          backgroundColor: '#ffffff', // Cell background color
          
        },
        '& .MuiDataGrid-footerContainer': {
          borderTop: '1px solid #e0e0e0',
          paddingRight: '16px',
          justifyContent: 'flex-end',
        },
        '& .MuiDataGrid-virtualScroller':{
            position: 'absolute',
            

        },
        
      }}
    >
      <DataGrid 
        rows={rows} 
        columns={columns} 
        pageSize={5} 
        getRowId={(row) => row._id} 
        disableSelectionOnClick 
        disableColumnResize
        disableExtendRowFullWidth={true}
        
      />
    </Box>
  );
};

const ActionMenu = ({ id, onEdit, onDelete }) => {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <>
      <IconButton onClick={handleClick}>
        <MoreVertIcon />
      </IconButton>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        <MenuItem onClick={() => { onEdit(id); handleClose(); }}>Edit</MenuItem>
        <MenuItem onClick={() => { onDelete(id); handleClose(); }}>Delete</MenuItem>
      </Menu>
    </>
  );
};

export default UserTable;


// File: components\VerificationTable.jsx
import React from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { Chip, IconButton, Menu, MenuItem, Box } from '@mui/material';
import MoreVertIcon from '@mui/icons-material/MoreVert';

const VerificationTable = ({ rows, onApprove, onReject }) => {
  // Define column widths
  const columnWidths = {
    name: 200,
    email: 200,
    phone: 150,
    verification: 170,
    actions: 150,
  };

  // Define columns
  const columns = [
    { field: 'name', headerName: 'Name', width: columnWidths.name },
    { field: 'email', headerName: 'Email', width: columnWidths.email },
    { field: 'phone', headerName: 'Contact', width: columnWidths.phone },
    {
      field: 'isAccepted',
      headerName: 'Verification',
      width: columnWidths.verification,
      headerAlign: 'center',
      align: 'center',
      renderCell: (params) => {
        if (params.value === true) {
          return <Chip label="Approved" color="success" />;
        } else if (params.value === false) {
          return <Chip label="Rejected" color="error" />;
        } else {
          return <Chip label="Pending" color="default" />;
        }
      },
    },
    {
      field: 'actions',
      headerName: 'Actions',
      width: columnWidths.actions,
      headerAlign: 'center',
      align: 'center',
      renderCell: (params) => (
        <ActionMenu
          id={params.row._id}
          onApprove={onApprove}
          onReject={onReject}
        />
      ),
    },
  ];

  return (
    <Box
      sx={{
        height: 500,
        width: '100%',
        overflowX: 'hidden',
        '& .MuiDataGrid-root': {
          backgroundColor: '#ffffff', // Table background color
        },
        '& .MuiDataGrid-columnHeaders': {
          backgroundColor: '#f5f5f5', // Header background color
        },
        '& .MuiDataGrid-cell': {
          backgroundColor: '#ffffff', // Cell background color
        },
        '& .MuiDataGrid-footerContainer': {
          borderTop: '1px solid #e0e0e0',
          paddingRight: '16px',
          justifyContent: 'flex-end',
        },
      }}
    >
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        getRowId={(row) => row._id}
        disableSelectionOnClick
        disableColumnResize
        disableExtendRowFullWidth={true}
      />
    </Box>
  );
};

const ActionMenu = ({ id, onApprove, onReject }) => {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <>
      <IconButton onClick={handleClick}>
        <MoreVertIcon />
      </IconButton>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        <MenuItem
          onClick={() => {
            onApprove(id);
            handleClose();
          }}
        >
          Approve
        </MenuItem>
        <MenuItem
          onClick={() => {
            onReject(id);
            handleClose();
          }}
        >
          Reject
        </MenuItem>
      </Menu>
    </>
  );
};

export default VerificationTable;


// File: components\VolunteerForm.jsx
import React, { useState } from 'react';
import '../styles/userForm.css';
import Sidebar from './Sidebar';
import axios from 'axios';
import { BASE_URL } from '../config';
import { useNavigate } from 'react-router-dom';
const VolunteerForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: '',
        cnic: '',
        role: 'volunteer'

    });
    const [successMessage, setSuccessMessage] = useState('');
    const [errors, setErrors] = useState({});

    // Function to handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        
        // Format CNIC field to XXXXX-XXXXXX-X format
        if (name === 'cnic') {
            let formattedValue = value.replace(/\D/g, ''); // Remove non-digit characters
            if (formattedValue.length > 5) {
                formattedValue = formattedValue.slice(0, 5) + '-' + formattedValue.slice(5);
            }
            if (formattedValue.length > 13) {
                formattedValue = formattedValue.slice(0, 13) + '-' + formattedValue.slice(13, 14);
            }
            setFormData({
                ...formData,
                [name]: formattedValue
            });
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };

    // Function to validate the form
    const validate = () => {
        const newErrors = {};

        // Validate full name (only letters and max length 50)
        if (!/^[A-Za-z\s]{1,50}$/.test(formData.name)) {
            newErrors.name = 'Full Name should contain only letters.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address.';
        }

        // Validate phone number (11 digits)
        if (!/^\d{11}$/.test(formData.phone)) {
            newErrors.phone = 'Phone Number should contain 11 digits.';
        }

        // Validate password (minimum 6 characters)
        if (formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters long.';
        }

        // Validate confirm password (must match password)
        if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match.';
        }

        // Validate CNIC (XXXXX-XXXXXX-X format)
        if (!/^\d{5}-\d{7}-\d{1}$/.test(formData.cnic)) {
            newErrors.cnic = 'CNIC should be in the format XXXXX-XXXXXXX-X.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Function to handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (validate()) {
            try {
                const token = localStorage.getItem('token');
                const { confirmPassword, ...requestData } = formData;
                const response = await axios.post(`${BASE_URL}/api/users/registerusers`, 
                    requestData, 
                    {
                        headers: {
                            Authorization: `Bearer ${token}`,
                        }
                    }
                );
                if (response.data.success) {
                    setSuccessMessage('User added successfully!');
                    navigate('/volunteers');
                    setFormData({
                        name: '',
                        email: '',
                        phone: '',
                        password: '',
                        confirmPassword: '',
                        cnic: '',
                        role: 'volunteer'
                    });
                }
            } catch (error) {
                console.error('Error adding user:', error.response?.data?.message || error.message);
                setErrors({ api: error.response?.data?.message || 'Failed to add user. Please try again later.' });
            }
        }
    };

    return (
        <div className='userForm-container'>
            <Sidebar />
            <div className="main-content">
                <h2>Create Volunteer</h2>
                <form className="user-form" onSubmit={handleSubmit}>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="name">Full Name <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="name"
                                    id="name"
                                    placeholder="Full Name"
                                    value={formData.name}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.name && <span className="error-text">{errors.name}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="email">Email Address <span className="required">*</span></label>
                                <input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email Address"
                                    value={formData.email}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.email && <span className="error-text">{errors.email}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="phone">Phone Number <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="phone"
                                    id="phone"
                                    placeholder="Phone Number"
                                    value={formData.phone}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength="11" // Max length for CNIC format

                                />
                            </div>
                            {errors.phone && <span className="error-text">{errors.phone}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="password">Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.password && <span className="error-text">{errors.password}</span>}
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="confirmPassword">Confirm Password <span className="required">*</span></label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    id="confirmPassword"
                                    placeholder="Confirm Password"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className="form-input"
                                />
                            </div>
                            {errors.confirmPassword && <span className="error-text">{errors.confirmPassword}</span>}
                        </div>
                        <div className="form-group">
                            <div className="form-label-input">
                                <label htmlFor="cnic">CNIC <span className="required">*</span></label>
                                <input
                                    type="text"
                                    name="cnic"
                                    id="cnic"
                                    placeholder="CNIC (XXXXX-XXXXXX-X)"
                                    value={formData.cnic}
                                    onChange={handleChange}
                                    className="form-input"
                                    maxLength="15" // Max length for CNIC format
                                />
                            </div>
                            {errors.cnic && <span className="error-text">{errors.cnic}</span>}
                        </div>
                    </div>
                    <div className="form-row button-container">
                        <button type="submit" className="submit-button">
                            + Add Volunteer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default VolunteerForm;


// File: styles\Approvals.css
.approval-container {
    display: flex;
    height: 100vh;
    width: 100vw;
}

.content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    min-height: 100vh; /* Ensures content area covers full height */
}

.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.header-container h2 {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
}


// File: styles\Auth.css
/* General Page Styling */
body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
    display: flex;
    height: 100vh;
    justify-content: center;
    align-items: center;
    background-color: #f0f0f0;
}

/* Container for split layout */
.container {
    display: flex;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
}

/* Left side - Image Section */
.left-section {
    width: 50%;
    background-image: url('../styles/img/home.jpg'); 
    background-size: cover;
    background-position: center;
    display: flex;
    align-items: flex-end;
    padding: 20px;
}

.left-section .image-caption {
    font-size: 14px;
    color: white;
    font-weight: bold;
}

/* Right side - Form Section */
.right-section {
    width: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #ffffff;
    padding: 40px;
}

.login-box {
    width: 100%;
    max-width: 400px;
    text-align: center;
    padding: 40px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
}

/* Form Styles */
h2 {
    font-size: 26px;
    color: #333;
    margin-bottom: 20px;
}

.input-container {
    margin-bottom: 20px;
}

input {
    width: 100%;
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #ddd;
    font-size: 16px;
    outline: none;
}

input:focus {
    border-color: #aa18ea; /* Focus border color */
}

.login-button {
    width: 100%;
    padding: 12px;
    background-color: #aa18ea; /* Button color */
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-button:hover {
    background-color: #900ec4; /* Darker shade on hover */
}

/* Error Message Styling */
.error {
    color: red;
    margin-bottom: 20px;
}

.success {
    color: green;
    margin-bottom: 20px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .left-section, .right-section {
        width: 100%;
    }

    .left-section {
        height: 40%;
    }

    .right-section {
        height: 60%;
    }
}


// File: styles\b.css
.issue-details-modal {
  width: 80%;
  max-width: 900px;
  margin: 0 auto;
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  max-height: 90vh; /* Modal height is limited to 90% of the viewport height */
  display: flex;
  flex-direction: column;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.close-button {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.modal-content {
  flex-grow: 1;
  overflow-y: auto; /* Enable vertical scrolling */
  padding-right: 15px; /* Add padding to prevent content from touching scrollbar */
  margin-right: -15px; /* Align the padding */
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 8px;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.form-group textarea {
  resize: vertical;
  height: 100px;
}

.media-item {
  margin-bottom: 10px;
}

.form-actions {
  text-align: right;
  margin-top: 20px;
}

.form-actions button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.form-actions button:hover {
  background-color: #0056b3;
}

#assignTask{
    color: white;
    background-color: #aa18ea;
    width: 110px;
    margin: 5px;
}
#cancel {
    color: white;
    background-color: rgb(255, 58, 58);
    width: 110px;
    margin: 5px;


}
#assignTask:hover{
    background-color: #8315b1;

}
#cancel:hover{
    background-color: red;

}

// File: styles\CompleteModal.css
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }
  
  .issue-details-modal {
    width: 80%;
    max-width: 900px;
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
  }
  
  .modal-content {
    flex-grow: 1;
    overflow-y: auto;
    padding-right: 15px;
    margin-right: -15px;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
  }
  
  .media-item {
    margin-bottom: 10px;
  }
  
  .form-actions {
    text-align: right;
    margin-top: 20px;
  }
  
  .form-actions button {
    padding: 10px 20px;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  #assignTask {
    background-color: #aa18ea;
    width: 110px;
    margin: 5px;
  }
  
  #cancel {
    background-color: rgb(255, 58, 58);
    width: 110px;
    margin: 5px;
  }
  
  #assignTask:hover {
    background-color: #8315b1;
  }
  
  #cancel:hover {
    background-color: red;
  }
  

// File: styles\Dashboard.css
/* General Dashboard Container */
.dashboard-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    font-family: 'Roboto', sans-serif;
}

/* Sidebar Styling */
.sidebar {
    width: 240px;
    background-color: #1e1e2f; /* Dark background */
    color: #ffffff;
    height: 100vh;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    position: fixed;
    
    
  }

.sidebar h2 {
    color: #aa18ea; /* Sidebar Title Color */
    margin-bottom: 40px;
}

.sidebar-links {
    list-style: none;
    padding: 0;
}

.sidebar-links li {
    margin: 20px 0;
}

.sidebar-links a {
    text-decoration: none;
    color: white;
    font-size: 18px;
    transition: color 0.3s ease;
}

.sidebar-links a:hover {
    color: #aa18ea; /* Link hover color */
}

/* Main Content Styling */
.main-content {
    flex-grow: 1;
    padding: 20px;
    background-color: #f5f5f5;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

/* Header Styling */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.header h1 {
    font-size: 2em;
    color: #333;
}

.header-buttons {
    display: flex;
    gap: 10px;
}

/* Content Grid */
.content-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 20px;
}

/* Card Styling */
.card {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.card h3 {
    font-size: 1.5em;
    color: #333;
}

.card p {
    color: #666;
    margin-bottom: 20px;
}

/* Button Styling */
.custom-button {
    background-color: #aa18ea; 
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 100%;
}

.custom-button:hover {
    background-color: #900ec4; /* Darker hover color */
}

/* Responsive Layout */
@media (max-width: 768px) {
    .content-grid {
        grid-template-columns: 1fr; /* Stack cards vertically on small screens */
    }

    .header h1 {
        font-size: 1.5em;
    }

    .custom-button {
        font-size: 0.9em;
        padding: 8px 16px;
    }
}

/* Dashboard Container */
.dashboard-container {
  display: flex;
}

/* Main Content */
.dashboard-content {
  margin-left: 290px; /* Offset for the sidebar */
  padding: 20px;
  flex-grow: 1;
  background-color: #f8f9fa;
  height: 100vh;
  overflow-y: auto;
}

/* Header Styling */
.dashboard-header {
  margin-bottom: 30px;
}

.dashboard-header h1 {
  font-size: 24px;
  color: #3a3a3a;
}

.dashboard-header p {
  font-size: 14px;
  color: #7a7a7a;
}

/* Statistics Cards */
.dashboard-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.stat-card h3 {
  font-size: 16px;
  color: #333333;
  margin-bottom: 10px;
}

.stat-card h2 {
  font-size: 32px;
  color: #009688;
  margin-bottom: 5px;
}

.stat-card h2 span {
  font-size: 16px;
  color: #27ae60;
}

.stat-card p {
  font-size: 14px;
  color: #7a7a7a;
}

/* Chart Section */
/* Chart Section */
.dashboard-charts {
    margin-top: 20px;
  }
  
  .chart-container {
    background-color: #ffffff;
    border: 1px solid #e0e0e0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    height: 350px; /* Adjusted height for better appearance */
    width: 100%; /* Full width */
    max-width: 1000px; /* Optional: limit max-width for larger screens */
    margin: 0 auto; /* Center align the chart */
  }
  
  .chart-container h3 {
    margin-bottom: 15px;
    font-size: 18px;
    color: #111827; /* Darker text for title */
    display: flex;
    justify-content: space-between;
  }
  
  .chart-container h3 span {
    font-weight: normal;
    font-size: 14px;
  }
  

// File: styles\DefaultPage.css
/* General Page Styling */
.default-page {
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center;
    min-height: 100vh; /* Ensure full viewport height */
    padding: 20px;
    background-color: #f5f5f5;
    text-align: center;
}

.content-wrapper {  /* New wrapper for vertical centering */
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Distribute space between elements */
    align-items: center;
    width: 100%;
    max-width: 800px; /* Limit width on larger screens */
    margin: 0 auto; /* Center horizontally */
 }


/* Image Container */
.image-container {
    width: 100%;
    margin-bottom: 20px;
}

.center-image {
    width: 100%;
    max-width: 500px;  /* Limit image width */
    height: auto;
    display: block; /* Prevents margin collapse */
    margin: 0 auto; /* Center horizontally */
}

/* Welcome Message Styling */
.welcome-box {
    margin-bottom: 20px;
}

.welcome-box h1 {
    font-size: 2em; /* Larger default font size */
    color: #333;
    margin: 0;
}

/* Button Container */
.button-container {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-bottom: 20px; /* Reduced bottom margin */
}


/* Button Styling */
.custom-button {
    background-color: #aa18ea;
    color: white;
    padding: 12px 24px; /* Increased padding */
    border: none;
    border-radius: 5px;
    font-size: 1.1em; /* Slightly larger font size */
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.custom-button:hover {
    background-color: #900ec4;
}

/* Media Queries for Responsiveness */
@media (max-width: 768px) {
    .welcome-box h1 {
        font-size: 1.8em;
    }
    .custom-button {
        font-size: 1em;
        padding: 10px 20px; /* Adjust padding */
    }

    .center-image {
        max-width: 90%; /* Image takes up more relative width */

    }

}


@media (max-width: 480px) {
    .welcome-box h1 {
        font-size: 1.5em;
    }
    .custom-button {
        font-size: 0.9em;
        padding: 8px 16px;
    }
}

// File: styles\IssuePage.css


// File: styles\IssuesScreen.css
html, body {
    overflow-x: hidden; /* Disable horizontal scrolling */
    margin: 0;
    padding: 0;
    width: 100%; /* Ensure no horizontal overflow */
  }
.assigned-tasks-screen-container,
.issues-screen-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    overflow-x: hidden; 
  }
  
  .content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    min-height: 100vh; 
  }
  
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;

  }
  
  /* .issues-table-container {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }
   */





   .loading-spinner {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: auto;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  

// File: styles\ManageProfile.css
/* Ensure full height and width of the container */

.manage-profile-container {
    display: flex;
    width: 100vw; /* Full width of the viewport */
    height: 100vh; /* Full height of the viewport */
    font-family: 'Roboto', sans-serif;
}

/* Sidebar Styling */
.sidebar {
    width: 250px;
    background-color: #333;
    color: white;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100vh;
}

.sidebar h2 {
    color: #aa18ea;
    margin-bottom: 40px;
}

.sidebar-links {
    list-style: none;
    padding: 0;
}

.sidebar-links li {
    margin: 20px 0;
}

.sidebar-links a {
    text-decoration: none;
    color: white;
    font-size: 18px;
    transition: color 0.3s ease;
}

.sidebar-links a:hover {
    color: #aa18ea;
}

/* Main Content Styling */
.main-content {
    flex-grow: 1; /* Take the remaining space next to the sidebar */
    display: flex;
    margin-left: 300px;
    flex-direction: column;
    padding: 20px;
    background-color: white;
}

/* Header Styling */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.header h1 {
    font-size: 2em;
    color: #333;
}

/* Profile Form Styling */
.profile-form-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    flex-grow: 1;
    max-width: 500px;
  
}

.profile-form {
    display: flex;
    flex-direction: column;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    font-size: 1.2em;
    color: #333;
    margin-bottom: 5px;
    display: block;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease;
}

.form-group input:focus {
    border-color: #aa18ea;
}

/* Button Styling */
.custom-button {
    background-color: #aa18ea;
    color: white;
    padding: 12px;
    border: none;
    border-radius: 5px;
    font-size: 1.2em;
    cursor: pointer;
    transition: background-color 0.3s ease;
}




.custom-button:hover {
    background-color: #900ec4;
}
.pollBtn{
    background-color: #aa18ea;
    color: white;
    border-radius: 5px;
    padding: 5px;

    cursor: pointer;
    width: 20%;
    transition: background-color 0.3s ease;

    
}
.pollBtn:hover{
    background-color: #900ec4;
}

/* Success Message */
.success-message {
    margin-top: 20px;
    color: green;
    font-size: 1.1em;
}

/* Responsive Layout */
@media (max-width: 768px) {
    .header h1 {
        font-size: 1.5em;
    }

    .custom-button {
        font-size: 1em;
        padding: 10px;
    }

    .profile-form-container {
        padding: 20px;
    }
}
/* Error Message */
.error-message {
    margin-top: 20px;
    color: red;
    font-size: 1.1em;
  }
  
  /* Ensure password fields match the existing form fields */
  .profile-form input[type="password"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease;
  }
  
  .profile-form input[type="password"]:focus {
    border-color: #aa18ea;
  }
  .password-container {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .password-container input {
    width: 100%;
    padding-right: 40px; /* space for eye icon */
  }
  
  .password-toggle-icon {
    position: absolute;
    right: 10px;
    cursor: pointer;
  }
  /* Filter button styling */
.filter-button {
    background-color: #aa18ea;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-bottom: 20px; /* Adds some space below the button */
    border-radius: 4px;
  }
  
  .filter-button:hover {
    background-color: #900ec4;
  }
  
  /* Poll Name Clickable */
.poll-name {
    cursor: pointer;
    font-size: 18px;
    padding: 10px;
    background-color: white;
    margin: 5px 0;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }
  
  .poll-name:hover {
    background-color: #b545e6;
  }
  
  /* Poll Details */
  .poll-details {
    padding: 10px;
    background-color: #f9f9f9;
    border-radius: 4px;
    margin: 5px 0;
  }
  
  /* Body transition for background color */
  body {
    transition: background-color 0.5s ease;
  }
  /* Additional styling for the view results button */
.view-results-button {
    margin-top: 10px;
    background-color: #aa18ea;
    color: white;
    padding: 12px;
    border: none;
    border-radius: 5px;
    font-size: 1.2em;
    width: 66vh;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .view-results-button:hover {
    background-color:  #b545e6;
  }
  .chart-container {
    max-width: 400px;
    margin: 20px auto;
  }
  
  /* Button Spacing */
.form-button {
    margin-top: 20px; /* Space between form elements */
  }
  
  .custom-button + .custom-button {
    margin-left: 10px; /* Space between buttons if side by side */
  }
  
  /* Scrollable List Styling */
  .scrollable-list {
    max-height: 300px; /* Limit the height */
    overflow-y: auto; /* Make it scrollable */
    margin-top: 10px; /* Optional margin */
  }
  
  /* Optional: Add styles to make the scroll experience more elegant */
  .scrollable-list::-webkit-scrollbar {
    width: 6px;
  }
  
  .scrollable-list::-webkit-scrollbar-thumb {
    background-color: #aa18ea; /* Customize scrollbar thumb color */
    border-radius: 4px;
  }
  .poll-list-container {
  max-height: 500px; /* Limit the height of the container */
  overflow-y: auto; /* Enable vertical scrolling */
  padding-right: 10px; /* Add padding to prevent scroll bar from overlapping content */
}


/* Project Card Styling */
.project-card {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* Button Group to Align Buttons */
.button-group {
    display: flex;
    gap: 10px; /* Space between buttons */
    margin-top: 10px;
}

/* Edit Project Input */
.edit-input {
    padding: 10px;
    width: 100%;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
}

/* Success and Error Messages */
.success-message,
.error-message {
    margin-top: 20px;
    font-size: 1.1em;
}

.success-message {
    color: green;
}

.error-message {
    color: red;
}

/* Responsive Design */
@media (max-width: 768px) {
    .button-group {
        flex-direction: column;
        gap: 5px; /* Reduce space between buttons on smaller screens */
    }

    .edit-input {
        margin-bottom: 15px; /* Add space between input and buttons */
    }
}


// File: styles\NormalUsers.css
/* src/styles/NormalUsers.css */
html, body {
    overflow-x: hidden; /* Disable horizontal scrolling */
    margin: 0;
    padding: 0;
    width: 100%; /* Ensure no horizontal overflow */
  }
  
.normal-users-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    overflow-x: hidden; 
    
  }
  
  .content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    min-height: 100vh; /* Ensures content area covers full height */
  }
  
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .header-container h2 {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
  }
  
  .add-user-btn {
    background-color: #000000; /* Black button color */
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-right: 30px;
    /* position :fixed; */
  }
  
  .add-user-btn:hover {
    background-color: #333333; /* Slightly lighter on hover */
  }
  
  /* Additional Styling for Search and Filter (if required) */
  .search-container {
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .search-input {
    padding: 8px;
    width: 100%;
    max-width: 300px;
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 14px;
  }


// File: styles\Register.css
/* Auth Container */
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh; /* Ensure full viewport height */
  background-color: #f5f5f5;
  font-family: sans-serif; /* Use a system font stack */
}

.auth-form-container {
  width: 90%; /* Responsive width */
  max-width: 400px; /* Max width on larger screens */
  padding: 20px; /* Add padding */
}

.auth-form-box {
  background-color: white;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
}

/* Input Styles */
.input-group {
  margin-bottom: 15px;
}

.input-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500; /* Slightly bolder labels */
}

.input-group input,
.input-group select { /* Style select elements similarly */
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /* Include padding and border in element's total width and height */
  font-size: 16px;
}


.input-group input:focus,
.input-group select:focus {
  outline: none;
  border-color: #aa18ea;  /* Focus style */
  box-shadow: 0 0 5px rgba(170, 24, 234, 0.3); /* Subtle focus shadow */
}


/* Messages */
.error-message,
.success-message {
  margin-top: 10px;
  padding: 8px 12px;
  border-radius: 4px;
  font-size: 14px;
}

.error-message {
  color: white;
  background-color: #ff4d4d; /* Red error background */
}

.success-message {
  color: white;
  background-color: #4CAF50; /* Green success background */
}

/* Button */
.auth-button {
  display: block; /* Take up full width */
  width: 100%;
  padding: 12px;
  margin-top: 20px;
  background-color: #aa18ea;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}


.auth-button:hover {
  background-color: #900ec4;
}

// File: styles\ServiceProviders.css
.service-providers-container {
    display: flex;
    height: 100vh;
    width: 100vw;
  }
  
  .content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    min-height: 100vh; /* Ensures content area covers full height */
  }
  
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .header-container h2 {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
  }
  
  .add-service-provider-btn {
    background-color: #000000; /* Black button color */
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-right: 30px;
  }
  
  .add-service-provider-btn:hover {
    background-color: #333333; /* Slightly lighter on hover */
  }
  
  /* Additional Styling for Search and Filter (if required) */
  .search-container {
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .search-input {
    padding: 8px;
    width: 100%;
    max-width: 300px;
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 14px;
  }
  

// File: styles\Sidebar.css

/* Sidebar Styling */
.sidebar {
    width: 240px;
    background-color: #1e1e2f; /* Dark background */
    color: #ffffff;
    height: 100vh;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    position: fixed;
    overflow-y: auto;
    
  }
  
  .sidebar h2 {
    font-size: 22px;
    margin-bottom: 20px;
    color: #aa18ea; /* Branding color */
  }
  
  .sidebar-links {
    list-style: none;
    padding: 0;
    margin: 0;
    width: 100%;
    flex-grow: 1; 
  }
  
  .sidebar-links li {
    margin: 15px 0;
  }
  
  .sidebar-links a {
    text-decoration: none;
    color: #ffffff;
    font-size: 16px;
    padding: 10px 15px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    transition: background-color 0.3s ease;
  }
  
  .sidebar-links a:hover {
    background-color: #c6c9c4; /* Highlighted green on hover */
    color: #111;
  }
  
  .icon {
    margin-right: 10px; /* Space between icon and text */
  }
  
  /* Submenu Styling */
  .submenu {
    list-style: none;
    padding-left: 20px; /* Indentation for submenu */
    margin: 10px 0;
  }
  
  .submenu-icon {
    margin-right: 8px;
  }
  
  .submenu a {
    color: #ffffff;
    font-size: 14px;
  }
  
  .submenu a:hover {
    color: #8bea47;
  }
  
  /* Active Link Styling */
  .sidebar-links li.active > a {
    background-color: #8bea47; /* Active item highlighted */
    color: #111;
  }
  

// File: styles\ToggleSwitch.css

  
  .switch {
    display: flex;
    align-items: center;
    position: relative;
    width: 50px;
    height: 24px;
    margin-left: 10px;
  }
  
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: 0.4s;
    border-radius: 34px;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 4px;
    bottom: 3px;
    background-color: white;
    transition: 0.4s;
    border-radius: 50%;
  }
  
  input:checked + .slider {
    background-color: #4caf50; /* Green when active */
  }
  
  input:checked + .slider:before {
    transform: translateX(26px);
  }
  
  .toggle-label {
    font-size: 14px;
    /* display: flex; */
    margin-left: 48px;
  }

// File: styles\userForm.css
.userForm-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    overflow-x: hidden;
}

.main-content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    height: max-content;
}

.user-form {
    display: grid;
    gap: 22px;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
}

.form-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px; /* Space between form groups */
}

.form-label-input {
    display: flex;
    align-items: center; /* Align label and input vertically */
    gap: 10px; /* Space between label and input */
}

.form-label-input label {
    width: 160px; /* Fixed width for labels */
    font-weight: bold;
}

.form-label-input .required {
    color: red;
    margin-left: 5px;
}

.form-input {
    flex: 1; /* Input takes remaining space */
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    background-color: white;
}

.error-text {
    color: red;
    font-size: 12px;
    margin-top: 5px; 
}

.button-container {
    text-align: right; 
}

.submit-button {
    background-color: #aa18ea; 
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 28%; 
}

.submit-button:hover {
    background-color: #900ec4;
}
.button-container-edit{
    display: inline-flex;
    gap: 10px;

}
.save-button {
    background-color: #aa18ea; 
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 10%; 
}
.cancel-button{
    background-color: red; 
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 10%; 
    
}
.save-button:hover {
    background-color: #900ec4;
}
.cancel-button:hover{
    background-color: rgb(207, 3, 3);
}

// File: styles\Volunteers.css
.volunteers-container {
    display: flex;
    height: 100vh;
    width: 100vw;
  }
  
  .content {
    margin-left: 310px; /* Adjust based on your sidebar width */
    padding: 20px;
    width: 100%;
    background-color: #f4f4f4; /* Optional: background for content area */
    min-height: 100vh; /* Ensures content area covers full height */
  }
  
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .header-container h2 {
    font-size: 24px;
    font-weight: bold;
    margin: 0;
  }
  
  .add-volunteer-btn {
    background-color: #000000; /* Black button color */
    color: #ffffff;
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-right: 30px;
  }
  
  .add-volunteer-btn:hover {
    background-color: #333333; /* Slightly lighter on hover */
  }
  
  /* Additional Styling for Search and Filter (if required) */
  .search-container {
    margin-bottom: 20px;
    display: flex ;
    /* width: 400px; */
    margin-right: 50px;
    justify-content: space-between;
    align-items: center;
  }
  
  .search-input {
    padding: 8px;
    width: 100%;
    max-width: 300px;
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 14px;
  }
  
 
    

// File: screens\AssignedTasksScreen.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BASE_URL } from '../config';
import Sidebar from '../components/Sidebar';
import AssignedTaskTable from '../components/AssignedTaskTable';
import { Modal } from '@mui/material';
import IssueDetailsModal from '../components/IssueDetailsModal';
import '../styles/IssuesScreen.css';

const AssignedTasksScreen = () => {
  const [tasks, setTasks] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);

  const fetchAssignedTasks = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${BASE_URL}/api/issueReporting/issues/in-progress`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
        const fetchedIssues = response.data.issues.map(item => {
        return {
          ...item,
          assignedVolunteers : item.assignedVolunteers.length,
        };
      });
    //   console.log("fetched issues",fetchedIssues);

      setTasks(fetchedIssues);
    } catch (error) {
      console.error('Error fetching assigned tasks:', error);
    }
  };

  useEffect(() => {
    fetchAssignedTasks();
  }, []);

  const handleViewDetails = (id) => {
    const taskToView = tasks.find(task => task._id === id);
    setSelectedTask(taskToView);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedTask(null);
  };

  return (
    <div className="assigned-tasks-screen-container">
      <Sidebar />
      <div className="content">
        <div className="header-container">
          <h2>Assigned Tasks</h2>
        </div>

        <AssignedTaskTable
          rows={tasks}
          onView={handleViewDetails}
        />

        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedTask && (
              <IssueDetailsModal issue={selectedTask} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default AssignedTasksScreen;


// File: screens\CompletedIssuesScreen.jsx
import React, { useEffect, useState } from 'react';
import '../styles/IssuesScreen.css';
import CompletedIssueTable from '../components/CompletedIssueTable';
import Sidebar from '../components/Sidebar';
import CompletedModal from '../components/CompletedModal';
import AdminReportModal from '../components/AdminReportModal'; // Import AdminReportModal
import { Modal } from '@mui/material';
import axios from 'axios';
import { BASE_URL } from '../config';

const CompletedIssuesScreen = () => {
  const [completedIssues, setCompletedIssues] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [openModal, setOpenModal] = useState(false); // For CompletedModal
  const [openReportModal, setOpenReportModal] = useState(false); // For AdminReportModal

  const handleOpenModal = (issue) => {
    setSelectedIssue(issue);
    setOpenModal(true);
  };

  const handleOpenReportModal = (issue) => {
    setSelectedIssue(issue);
    setOpenReportModal(true);
  };

  const handleCloseModal = () => {
    setSelectedIssue(null);
    setOpenModal(false);
  };

  const handleCloseReportModal = () => {
    setSelectedIssue(null);
    setOpenReportModal(false);
  };

  const handleSubmitReport = async (reportDescription) => {
    if (!selectedIssue) return;
    const token = localStorage.getItem('token');
  
    try {
      await axios.post(
        `${BASE_URL}/api/issueReporting/task-status/${selectedIssue.id}`,
        { description: reportDescription },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      alert('Report submitted successfully.');
      handleCloseReportModal(); // Close the AdminReportModal after successful submission
    } catch (error) {
      console.error('Error submitting report:', error);
      alert('Failed to submit report.');
    }
  };

  useEffect(() => {
    const fetchCompletedIssues = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/issueReporting/completed-issues`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        const issuesWithId = response.data.completedIssues.map(issue => ({
          id: issue._id,
          description: issue.description,
          leader: issue.leader?.name || 'N/A',
          completionReport: issue.completionReport?.description || 'No Report',
          completionDate: issue.completionReport?.date || 'No Date',
          completedBy: issue.completionReport?.completedBy || 'N/A',
          reportedBy: issue.reportedBy?.name || 'N/A',
          reportedByEmail: issue.reportedBy?.email || 'N/A',
          status: issue.status,
          issueType: issue.issueType,
          location: issue.location,
          media: issue.completionReport.media,
          createdAt: issue.createdAt,
        }));

        setCompletedIssues(issuesWithId);
      } catch (error) {
        console.error('Error fetching completed issues:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchCompletedIssues();
  }, []);

  if (loading) {
    return <div className="loading-spinner"></div>;
  }

  return (
    <div className="issues-screen-container">
      <Sidebar />
      <div className="content">
        <h2>Completed Issues</h2>
        {completedIssues.length > 0 ? (
          <CompletedIssueTable
            rows={completedIssues}
            onViewDetails={handleOpenModal} // Opens CompletedModal
            onReport={handleOpenReportModal} // Opens AdminReportModal for reporting action
            isCompleted={true} 
            isCompletedScreen={true} 

          />
        ) : (
          <div className="no-issues-message">There are no completed issues right now.</div>
        )}

        {/* CompletedModal for viewing issue details */}
        <Modal open={openModal} onClose={handleCloseModal} aria-labelledby="issue-details-modal">
          <div>
            {selectedIssue && (
              <CompletedModal
                issue={selectedIssue}
                onClose={handleCloseModal}
                onSubmitReport={handleSubmitReport}
              />
            )}
          </div>
        </Modal>

        {/* AdminReportModal for submitting a report to the user */}
        <Modal open={openReportModal} onClose={handleCloseReportModal} aria-labelledby="admin-report-modal">
          <div>
            {selectedIssue && (
              <AdminReportModal
                open={openReportModal}
                issue={selectedIssue}
                onClose={handleCloseReportModal}
                onSubmit={handleSubmitReport}

              />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default CompletedIssuesScreen;


// File: screens\InProgressIssuesScreen.jsx
import React, { useEffect, useState } from 'react';
import '../styles/IssuesScreen.css';
import CompletedIssueTable from '../components/CompletedIssueTable'; // Reuse this table component
import Sidebar from '../components/Sidebar';
import TaskProgressModal from '../components/TaskProgressModal'; // Import the new TaskProgressModal
import { Modal } from '@mui/material';
import axios from 'axios';
import { BASE_URL } from '../config';

const InProgressIssuesScreen = () => {
  const [inProgressIssues, setInProgressIssues] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [openModal, setOpenModal] = useState(false); // For TaskProgressModal

  const handleOpenModal = (issue) => {
    setSelectedIssue(issue);
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setSelectedIssue(null);
    setOpenModal(false);
  };

  useEffect(() => {
    const fetchInProgressIssues = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/issueReporting/in-progress-issues-reports`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        // console.log("hheheh",response.data);

        const issuesWithId = response.data.issues.map(issue => ({
          id: issue._id,
          reportedBy : issue.reportedBy.name,
          description: issue.description,
          leader: issue.leader?.name || 'N/A',
          updatedBy: issue.progressUpdates?.[0]?.updatedBy.name || 'N/A', // Get the latest 'updatedBy' name
          status: issue.status,
          issueType: issue.issueType,
          location: issue.location,
          createdAt: issue.createdAt,
          progressUpdates: issue.progressUpdates || [], // Include progress updates for modal
        }));
        setInProgressIssues(issuesWithId);
      } catch (error) {
        console.error('Error fetching in-progress issues:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchInProgressIssues();
  }, []);

  if (loading) {
    return <div className="loading-spinner"></div>;
  }

  return (
    <div className="issues-screen-container">
      <Sidebar />
      <div className="content">
        <h2>In progress Issues Updates</h2>
        {inProgressIssues.length > 0 ? (
          <CompletedIssueTable
            rows={inProgressIssues}
            onViewDetails={handleOpenModal} // Opens TaskProgressModal
            isCompleted={false} // Ensures "Updated By" column shows
            isCompletedScreen={false} 
          />
        ) : (
          <div className="no-issues-message">There are no in-progress issue reports right now.</div>
        )}

        {/* TaskProgressModal for viewing progress details */}
        <Modal open={openModal} onClose={handleCloseModal} aria-labelledby="task-progress-modal">
          <div>
            {selectedIssue && (
              <TaskProgressModal
                issue={selectedIssue}
                onClose={handleCloseModal}
              />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default InProgressIssuesScreen;


// File: screens\IssuesScreen.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BASE_URL } from '../config';
import Sidebar from '../components/Sidebar';
import IssueTable from '../components/IssueTable';
import { Modal } from '@mui/material';
import IssueDetailsModal from '../components/IssueDetailsModal';
import ApproveModal from '../components/IssueApprovalModal';
import { useNavigate } from 'react-router-dom';
import '../styles/IssuesScreen.css';
const IssuesScreen = () => {
  const [issues, setIssues] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isApproveModalOpen, setIsApproveModalOpen] = useState(false); // New state for ApproveModal
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [reloadData, setReloadData] = useState(false);
  const navigate = useNavigate();

  const fetchIssues = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${BASE_URL}/api/issueReporting/admin/issues`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const fetchedIssues = response.data.issues.map(item => {
        const formattedDate = new Date(item.createdAt).toLocaleString('en-GB');
        const name = item.reportedBy.name;
        const media = item.media.uri;
        return {
          date: formattedDate,
          name: name,
          media: media,
          ...item,
        };
      });

      setIssues(fetchedIssues);
    } catch (error) {
      console.error('Error fetching issues:', error);
    }
  };

  useEffect(() => {
    fetchIssues();
  }, [reloadData]);

  const handleViewDetails = (id) => {
    const issueToView = issues.find(issue => issue._id === id);
    setSelectedIssue(issueToView);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedIssue(null);
    setReloadData(prev => !prev);
  };

  const handleReject = async (issueId) => {
    try {
      const token = localStorage.getItem('token');
      await axios.put(`${BASE_URL}/api/issueReporting/issues/${issueId}/reject`, null, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      navigate('/rejectedissues');
    } catch (error) {
      console.error('Error rejecting issue:', error);
    }
  };

  const handleApprove = (id) => {
    const issueToApprove = issues.find(issue => issue._id === id);
    setSelectedIssue(issueToApprove);
    setIsApproveModalOpen(true); // Open Approve Modal
  };

  const handleAssignTask = async (issueId, volunteers) => {
    try {
      const token = localStorage.getItem('token');
      
      // Send request to set required volunteers for the issue
      await axios.put(`${BASE_URL}/api/issueReporting/set-required-volunteers`, {
        issueId,
        requiredVolunteers: volunteers,
      }, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      setIsApproveModalOpen(false);
      navigate('/assignedtasks');
    } catch (error) {
      console.error('Error assigning task:', error);
      alert('Failed to assign task. Please try again.');
    }
  };
  

  return (
    <div className="issues-screen-container">
      <Sidebar />
      <div className="content">
        <div className="header-container">
          <h2>Reported Issues</h2>
        </div>

        <IssueTable
          rows={issues}
          onView={handleViewDetails}
          onReject={handleReject}
          onApprove={handleApprove}
          showReject={true}
          showApprove={true}
        />

        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedIssue && (
              <IssueDetailsModal issue={selectedIssue} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>

        <Modal open={isApproveModalOpen} onClose={() => setIsApproveModalOpen(false)}>
          <div>
            {selectedIssue && (
              <ApproveModal
                issue={selectedIssue}
                onClose={() => setIsApproveModalOpen(false)}
                onAssignTask={handleAssignTask}
              />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default IssuesScreen;


// File: screens\NormalUsers.jsx
import React, { useState, useEffect } from 'react';
import UserTable from '../components/UserTable';
import Sidebar from '../components/Sidebar';
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/NormalUsers.css';
import { useNavigate } from 'react-router-dom';
import { Modal } from '@mui/material';
import EditUserForm from '../components/EditUserForm';
import ToggleSwitch from '../components/ToggleSwitch';

const NormalUsers = () => {
  const [users, setUsers] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal
  const [showActiveUsers, setShowActiveUsers] = useState(true); // Toggle for active/inactive users
  const [selectedUser, setSelectedUser] = useState(null); // State to track user for editing
  const navigate = useNavigate(); 

  useEffect(() => {
    const fetchNormalUsers = async () => {
      try {
        // Get token from localStorage
        const token = localStorage.getItem('token');

        // Make API request to fetch normal users
        const response = await axios.get(`${BASE_URL}/api/user/getAllNormalUsers`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        // Set users data if request is successful
        setUsers(response.data.data);
      } catch (error) {
        console.error('Error fetching normal users:', error);
      }
    };

    fetchNormalUsers();
  }, []);

  const handleEdit = (id) => {
    const userToEdit = users.find(user => user._id === id);
    setSelectedUser(userToEdit); 
    setIsModalOpen(true); 
  };

  const handleCloseModal = () => {
    setIsModalOpen(false); 
    setSelectedUser(null); 
  };

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/disable/${id}`, 
        {}, 
        {
          headers: {
            Authorization: `Bearer ${token}`, 
          },
        }
      );

      if (response.data.success) {
        // Update the state to reflect the change
        setUsers(prevUsers => prevUsers.map(user => 
          user._id === id ? { ...user, isActive: false } : user
        ));
      } else {
        console.error('Failed to disable the user');
      }
    } catch (err) {
      console.error('Error disabling user:', err);
    }
  };

  const handleAddUser = () => {
    navigate('/UserForm');
  };
  
  const handleToggle = () => {
    setShowActiveUsers(!showActiveUsers);
  };

  // Filter users based on the toggle state
  const filteredUsers = users.filter(user => showActiveUsers ? user.isActive : !user.isActive);

  return (
    <div className="normal-users-container">
      {/* Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="content">
        <div className="header-container">
          <h2>Users</h2>
          <button className="add-user-btn" onClick={handleAddUser}>
            + New User
          </button>
        </div>

        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Search user..."
          />

          {/* Toggle for active/inactive users */}
          <ToggleSwitch isActive={showActiveUsers} handleToggle={handleToggle} />
        </div>

        {/* User Table with filtered users */}
        <UserTable rows={filteredUsers} onEdit={handleEdit} onDelete={handleDelete} />

        {/* Modal for Editing User */}
        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedUser && (
              <EditUserForm user={selectedUser} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default NormalUsers;


// File: screens\RejectedIssuesScreen.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BASE_URL } from '../config';
import Sidebar from '../components/Sidebar';
import IssueTable from '../components/IssueTable';
import IssueDetailsModal from '../components/IssueDetailsModal'; // Modal for issue details
import { Modal } from '@mui/material'; // For modal
import '../styles/IssuesScreen.css';

const RejectedIssuesScreen = () => {
  const [rejectedIssues, setRejectedIssues] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility state
  const [selectedIssue, setSelectedIssue] = useState(null); // Track the selected issue for the modal
  const [reloadData, setReloadData] = useState(false); // Trigger to reload the issues when updated

  const fetchRejectedIssues = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${BASE_URL}/api/issueReporting/issues/rejected`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const fetchedIssues = response.data.issues.map(item => {
        const formattedDate = new Date(item.createdAt).toLocaleString('en-GB');
        const name = item.reportedBy.name;
        const media = item.media.uri;
        return {
          date: formattedDate,
          name: name,
          media: media,
          ...item,
        };
      });
      setRejectedIssues(fetchedIssues);
    } catch (error) {
      console.error('Error fetching rejected issues:', error);
    }
  };

  useEffect(() => {
    fetchRejectedIssues();
  }, [reloadData]);

  const handleViewDetails = (id) => {
    const issueToView = rejectedIssues.find(issue => issue._id === id);
    setSelectedIssue(issueToView);
    setIsModalOpen(true);
  };

  // Handle closing the modal and trigger reload data
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setRejectedIssues(null);
    setReloadData(prev => !prev); // Toggle reloadData to refetch issues after modal closes
  };
  return (
    <div className="issues-screen-container">
      <Sidebar />
      <div className="content">
        <div className="header-container">
          <h2>Rejected Issues</h2>
        </div>
        <IssueTable rows={rejectedIssues} onView={handleViewDetails} showReject={false} showApprove={false} />

        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedIssue && (
              <IssueDetailsModal issue={selectedIssue} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default RejectedIssuesScreen;


// File: screens\ServiceProviderApprovalScreen.jsx
import React, { useState, useEffect } from 'react';
import VerificationTable from '../components/VerificationTable'; // Reuse the table component with the approval/rejection feature
import Sidebar from '../components/Sidebar'; // Import the Sidebar
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/Approvals.css'; // Import CSS for layout styling

const ServiceProviderApprovalScreen = () => {
  const [serviceProviders, setServiceProviders] = useState([]);

  useEffect(() => {
    const fetchServiceProviders = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/user/getAllServiceProviders`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setServiceProviders(response.data.data);
      } catch (error) {
        console.error('Error fetching service providers:', error);
      }
    };
    fetchServiceProviders();
  }, []);

  const handleApprove = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/approve/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.success) {
        setServiceProviders((prev) =>
          prev.map((provider) =>
            provider._id === id ? { ...provider, isAccepted: true } : provider
          )
        );
      } else {
        console.error('Failed to approve service provider');
      }
    } catch (err) {
      console.error('Error approving service provider:', err);
    }
  };

  const handleReject = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/reject/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.success) {
        setServiceProviders((prev) =>
          prev.map((provider) =>
            provider._id === id ? { ...provider, isAccepted: false } : provider
          )
        );
      } else {
        console.error('Failed to reject service provider');
      }
    } catch (err) {
      console.error('Error rejecting service provider:', err);
    }
  };

  return (
    <div className="approval-container">
      <Sidebar />

      <div className="content">
        <div className="header-container">
          <h2>Service Provider Approvals</h2>
        </div>

        {/* Verification Table */}
        <VerificationTable
          rows={serviceProviders}
          onApprove={handleApprove}
          onReject={handleReject}
        />
      </div>
    </div>
  );
};

export default ServiceProviderApprovalScreen;


// File: screens\ServiceProviders.jsx
import React, { useState, useEffect } from 'react';
import UserTable from '../components/UserTable';
import Sidebar from '../components/Sidebar'; // Import the Sidebar
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/ServiceProviders.css'; // Import CSS for layout styling
import { useNavigate } from 'react-router-dom';
import { Modal, Box } from '@mui/material';
import EditServiceProviderForm from '../components/EditServiceProvider';
import ToggleSwitch from '../components/ToggleSwitch';

const ServiceProviders = () => {
  const [serviceProviders, setServiceProviders] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal state
  const [showActiveUsers, setShowActiveUsers] = useState(true); // State to toggle active/inactive users

  const [selectedServiceProvider, setSelectedServiceProvider] = useState(null); // State for the user to edit
  const navigate = useNavigate();

  useEffect(() => {
    const fetchServiceProviders = async () => {
      try {
        // Get token from localStorage
        const token = localStorage.getItem('token');

        // Make API request to fetch service provider users
        const response = await axios.get(`${BASE_URL}/api/user/getAllServiceProviders`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        // Set service provider data if request is successful
        setServiceProviders(response.data.data);
      } catch (error) {
        console.error('Error fetching service providers:', error);
      }
    };

    // Call the function to fetch service providers
    fetchServiceProviders();
  }, []);

  const handleEdit = (id) => {
    // Find the service provider to be edited
    const providerToEdit = serviceProviders.find(provider => provider._id === id);
    setSelectedServiceProvider(providerToEdit); // Set the user for editing
    setIsModalOpen(true); // Open the modal
  };

  const handleCloseModal = () => {
    setIsModalOpen(false); // Close the modal
    setSelectedServiceProvider(null); // Clear selected user
  };

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/disable/${id}`, 
        {}, 
        {
          headers: {
            Authorization: `Bearer ${token}`, 
          },
        }
      );

      if (response.data.success) {
        // Update the state to reflect the change
        setServiceProviders(prevUsers => prevUsers.map(user => 
          user._id === id ? { ...user, isActive: false } : user
        ));
      } else {
        console.error('Failed to disable the user');
      }
    } catch (err) {
      console.error('Error disabling user:', err);
    }
  };

  // Handle adding a new service provider
  const handleAddServiceProvider = () => {
    navigate('/serviceproviderForm');
  };

  // Toggle between active and inactive service providers
  const handleToggle = () => {
    setShowActiveUsers(!showActiveUsers);
  };

  // Filter service providers based on active/inactive state
  const filteredServiceProviders = serviceProviders.filter(provider => 
    showActiveUsers ? provider.isActive : !provider.isActive
  );

  return (
    <div className="service-providers-container">
      {/* Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="content">
        <div className="header-container">
          <h2>Service Providers</h2>
          <button className="add-service-provider-btn" onClick={handleAddServiceProvider}>
            + New Service Provider
          </button>
        </div>
        
        {/* Search and Filters (Optional) */}
        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Search service provider..."
          />
          {/* Toggle Switch for Active/Inactive */}
          <ToggleSwitch isActive={showActiveUsers} handleToggle={handleToggle} />
        </div>

        {/* Service Providers Table */}
        <UserTable rows={filteredServiceProviders} onEdit={handleEdit} onDelete={handleDelete} />

        {/* Modal for Editing Service Provider */}
        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedServiceProvider && (
              <EditServiceProviderForm user={selectedServiceProvider} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default ServiceProviders;


// File: screens\VolunteerApprovalScreen.jsx
import React, { useState, useEffect } from 'react';
import VerificationTable from '../components/VerificationTable'; // Reuse the table component with the approval/rejection feature
import Sidebar from '../components/Sidebar'; // Import the Sidebar
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/Approvals.css'; 

const VolunteerApprovalScreen = () => {
  const [volunteers, setVolunteers] = useState([]);

  useEffect(() => {
    const fetchVolunteers = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/user/getAllVolunteers`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setVolunteers(response.data.data);
      } catch (error) {
        console.error('Error fetching volunteers:', error);
      }
    };
    fetchVolunteers();
  }, []);

  const handleApprove = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/approve/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.success) {
        setVolunteers((prev) =>
          prev.map((volunteer) =>
            volunteer._id === id ? { ...volunteer, isAccepted: true } : volunteer
          )
        );
      } else {
        console.error('Failed to approve volunteer');
      }
    } catch (err) {
      console.error('Error approving volunteer:', err);
    }
  };

  const handleReject = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/reject/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.success) {
        setVolunteers((prev) =>
          prev.map((volunteer) =>
            volunteer._id === id ? { ...volunteer, isAccepted: false } : volunteer
          )
        );
      } else {
        console.error('Failed to reject volunteer');
      }
    } catch (err) {
      console.error('Error rejecting volunteer:', err);
    }
  };

  return (
    <div className="approval-container">
      <Sidebar />

      <div className="content">
        <div className="header-container">
          <h2>Volunteer Approvals</h2>
        </div>

        {/* Verification Table */}
        <VerificationTable
          rows={volunteers}
          onApprove={handleApprove}
          onReject={handleReject}
        />
      </div>
    </div>
  );
};

export default VolunteerApprovalScreen;


// File: screens\Volunteers.jsx
import React, { useState, useEffect } from 'react';
import UserTable from '../components/UserTable';
import Sidebar from '../components/Sidebar';
import { BASE_URL } from '../config';
import axios from 'axios';
import '../styles/Volunteers.css';
import { useNavigate } from 'react-router-dom';
import { Modal } from '@mui/material';
import EditVolunteerForm from '../components/EditVolunteerForm';
import ToggleSwitch from '../components/ToggleSwitch'; 

const Volunteers = () => {
  const [volunteers, setVolunteers] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedVolunteer, setSelectedVolunteer] = useState(null);
  const [showActiveUsers, setShowActiveUsers] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchVolunteers = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${BASE_URL}/api/user/getAllVolunteers`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setVolunteers(response.data.data);
      } catch (error) {
        console.error('Error fetching volunteers:', error);
      }
    };
    fetchVolunteers();
  }, []);

  const handleEdit = (id) => {
    const volunteerToEdit = volunteers.find(volunteer => volunteer._id === id);
    setSelectedVolunteer(volunteerToEdit);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedVolunteer(null);
  };

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.patch(
        `${BASE_URL}/api/users/disable/${id}`, 
        {}, 
        {
          headers: {
            Authorization: `Bearer ${token}`, 
          },
        }
      );
      if (response.data.success) {
        setVolunteers(prevUsers => prevUsers.map(user => 
          user._id === id ? { ...user, isActive: false } : user
        ));
      } else {
        console.error('Failed to disable the user');
      }
    } catch (err) {
      console.error('Error disabling user:', err);
    }
  };

  const handleAddVolunteer = () => {
    navigate('/volunteerForm');
  };

  const filteredVolunteers = volunteers.filter(volunteer => showActiveUsers ? volunteer.isActive : !volunteer.isActive);

  const handleToggle = () => {
    setShowActiveUsers(!showActiveUsers);
  };

  return (
    <div className="volunteers-container">
      <Sidebar />

      <div className="content">
        <div className="header-container">
          <h2>Volunteers</h2>
          <button className="add-volunteer-btn" onClick={handleAddVolunteer}>
            + New Volunteer
          </button>
        </div>

        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Search volunteer..."
          />
          
          <ToggleSwitch isActive={showActiveUsers} handleToggle={handleToggle} />
        </div>

        <UserTable rows={filteredVolunteers} onEdit={handleEdit} onDelete={handleDelete} />

        <Modal open={isModalOpen} onClose={handleCloseModal}>
          <div>
            {selectedVolunteer && (
              <EditVolunteerForm user={selectedVolunteer} onClose={handleCloseModal} />
            )}
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default Volunteers;


